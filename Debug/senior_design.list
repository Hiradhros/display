
senior_design.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b14  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08003ca4  08003ca4  00013ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800430c  0800430c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800430c  0800430c  0001430c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004314  08004314  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004318  08004318  00014318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800431c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  20000074  08004390  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004390  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2b7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d5e  00000000  00000000  0002d35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  0002f0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  0002fa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000214a9  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008fb8  00000000  00000000  00051751  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4a01  00000000  00000000  0005a709  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f10a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002934  00000000  00000000  0011f188  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c8c 	.word	0x08003c8c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003c8c 	.word	0x08003c8c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b096      	sub	sp, #88	; 0x58
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800058a:	f000 fc4d 	bl	8000e28 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 800058e:	4817      	ldr	r0, [pc, #92]	; (80005ec <ESP_Init+0x6c>)
 8000590:	f000 fd04 	bl	8000f9c <Uart_sendstring>
	HAL_Delay(5000);
 8000594:	f241 3088 	movw	r0, #5000	; 0x1388
 8000598:	f001 f9b2 	bl	8001900 <HAL_Delay>

	/********* AT **********/
	//AT –> to check if the ESP is responding
	Uart_sendstring("AT\r\n");
 800059c:	4814      	ldr	r0, [pc, #80]	; (80005f0 <ESP_Init+0x70>)
 800059e:	f000 fcfd 	bl	8000f9c <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n")));
 80005a2:	bf00      	nop
 80005a4:	4813      	ldr	r0, [pc, #76]	; (80005f4 <ESP_Init+0x74>)
 80005a6:	f000 fd9b 	bl	80010e0 <Wait_for>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0f9      	beq.n	80005a4 <ESP_Init+0x24>


	/********* AT+CWMODE=1 **********/
	//AT+CWMODE=1 –> to set the ESP into the station mode
	Uart_sendstring("AT+CWMODE=1\r\n");
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <ESP_Init+0x78>)
 80005b2:	f000 fcf3 	bl	8000f9c <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n")));
 80005b6:	bf00      	nop
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <ESP_Init+0x7c>)
 80005ba:	f000 fd91 	bl	80010e0 <Wait_for>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0f9      	beq.n	80005b8 <ESP_Init+0x38>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80005c4:	f107 0008 	add.w	r0, r7, #8
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	490c      	ldr	r1, [pc, #48]	; (8000600 <ESP_Init+0x80>)
 80005ce:	f002 ff61 	bl	8003494 <siprintf>
	Uart_sendstring(data);
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 fce0 	bl	8000f9c <Uart_sendstring>
	//while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n")));

	/********* AT+CIPMUX=0 **********/
	Uart_sendstring("AT+CIPMUX=0\r\n");
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <ESP_Init+0x84>)
 80005de:	f000 fcdd 	bl	8000f9c <Uart_sendstring>
	//while (!(Wait_for("AT+CIPMUX=0\r\r\n\r\nOK\r\n")));

}
 80005e2:	bf00      	nop
 80005e4:	3758      	adds	r7, #88	; 0x58
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	08003ca4 	.word	0x08003ca4
 80005f0:	08003cb0 	.word	0x08003cb0
 80005f4:	08003cb8 	.word	0x08003cb8
 80005f8:	08003cc4 	.word	0x08003cc4
 80005fc:	08003cd4 	.word	0x08003cd4
 8000600:	08003cec 	.word	0x08003cec
 8000604:	08003d04 	.word	0x08003d04

08000608 <ESP_GetData>:

void ESP_GetData (char *api_key, char *Total) /*, char *Deaths, char *Recovered)*/
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b0a6      	sub	sp, #152	; 0x98
 800060c:	af02      	add	r7, sp, #8
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	char local_buf[100] = {0};
 8000612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000616:	2264      	movs	r2, #100	; 0x64
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fefd 	bl	800341a <memset>
	char local_buf2[30] = {0};
 8000620:	f107 0308 	add.w	r3, r7, #8
 8000624:	221e      	movs	r2, #30
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f002 fef6 	bl	800341a <memset>
	
	Uart_sendstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\"s\r\n");
 800062e:	4827      	ldr	r0, [pc, #156]	; (80006cc <ESP_GetData+0xc4>)
 8000630:	f000 fcb4 	bl	8000f9c <Uart_sendstring>
	//while (!(Wait_for("CONNECT\r\n\r\nOK\r\n")));
	
	sprintf (local_buf, "GET /apps/thinghttp/send_request?api_key=%s\r\n", api_key);
 8000634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4925      	ldr	r1, [pc, #148]	; (80006d0 <ESP_GetData+0xc8>)
 800063c:	4618      	mov	r0, r3
 800063e:	f002 ff29 	bl	8003494 <siprintf>
	int len = strlen (local_buf);
 8000642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fdc2 	bl	80001d0 <strlen>
 800064c:	4603      	mov	r3, r0
 800064e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	
	sprintf (local_buf2, "AT+CIPSEND=%d\r\n", len);
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800065a:	491e      	ldr	r1, [pc, #120]	; (80006d4 <ESP_GetData+0xcc>)
 800065c:	4618      	mov	r0, r3
 800065e:	f002 ff19 	bl	8003494 <siprintf>
	Uart_sendstring(local_buf2);
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fc98 	bl	8000f9c <Uart_sendstring>
	//while (!(Wait_for(">")));
	
	//bufclr(local_buf2);

	Uart_sendstring (local_buf);
 800066c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fc93 	bl	8000f9c <Uart_sendstring>
	//while (!(Wait_for("SEND OK\r\n")));
	

//	while (!(Wait_for ("\">")));
	while (!(Copy_upto ("</span>", local_buf2)));
 8000676:	bf00      	nop
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4619      	mov	r1, r3
 800067e:	4816      	ldr	r0, [pc, #88]	; (80006d8 <ESP_GetData+0xd0>)
 8000680:	f000 fcba 	bl	8000ff8 <Copy_upto>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f6      	beq.n	8000678 <ESP_GetData+0x70>
	len = strlen (local_buf2);
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff fd9e 	bl	80001d0 <strlen>
 8000694:	4603      	mov	r3, r0
 8000696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	snprintf (Total, len,local_buf2);
 800069a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800069e:	f107 0208 	add.w	r2, r7, #8
 80006a2:	4619      	mov	r1, r3
 80006a4:	6838      	ldr	r0, [r7, #0]
 80006a6:	f002 fec1 	bl	800342c <sniprintf>

	//char* yazi = "AMMMMMMMM";

	ILI9341_printText(Total,40,60,COLOR_WHITE,COLOR_WHITE,1);
 80006aa:	2301      	movs	r3, #1
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b8:	223c      	movs	r2, #60	; 0x3c
 80006ba:	2128      	movs	r1, #40	; 0x28
 80006bc:	6838      	ldr	r0, [r7, #0]
 80006be:	f000 fb25 	bl	8000d0c <ILI9341_printText>
	//while (!(Wait_for("<span>")));
	//while (!(Copy_upto ("</span>", local_buf2)));
	len = strlen (local_buf2);
	snprintf (Recovered, len-6,local_buf2);
	*/
}
 80006c2:	bf00      	nop
 80006c4:	3790      	adds	r7, #144	; 0x90
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	08003d14 	.word	0x08003d14
 80006d0:	08003d40 	.word	0x08003d40
 80006d4:	08003d70 	.word	0x08003d70
 80006d8:	08003d80 	.word	0x08003d80

080006dc <ILI9341_SendCommand>:
};

//***** Functions prototypes *****//
//1. Write Command to LCD
void ILI9341_SendCommand(uint8_t com)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <ILI9341_SendCommand+0x54>)
 80006ec:	6818      	ldr	r0, [r3, #0]
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <ILI9341_SendCommand+0x58>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	f001 fbd1 	bl	8001e9c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <ILI9341_SendCommand+0x5c>)
 80006fc:	6818      	ldr	r0, [r3, #0]
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <ILI9341_SendCommand+0x60>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	2200      	movs	r2, #0
 8000704:	4619      	mov	r1, r3
 8000706:	f001 fbc9 	bl	8001e9c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	2305      	movs	r3, #5
 8000710:	2201      	movs	r2, #1
 8000712:	480b      	ldr	r0, [pc, #44]	; (8000740 <ILI9341_SendCommand+0x64>)
 8000714:	f002 f8a2 	bl	800285c <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000718:	4b07      	ldr	r3, [pc, #28]	; (8000738 <ILI9341_SendCommand+0x5c>)
 800071a:	6818      	ldr	r0, [r3, #0]
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <ILI9341_SendCommand+0x60>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	2201      	movs	r2, #1
 8000722:	4619      	mov	r1, r3
 8000724:	f001 fbba 	bl	8001e9c <HAL_GPIO_WritePin>
}
 8000728:	bf00      	nop
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000f4 	.word	0x200000f4
 8000734:	200000f8 	.word	0x200000f8
 8000738:	200000ec 	.word	0x200000ec
 800073c:	200000f0 	.word	0x200000f0
 8000740:	20000094 	.word	0x20000094

08000744 <ILI9341_SendData>:

//2. Write data to LCD
void ILI9341_SendData(uint8_t data)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <ILI9341_SendData+0x54>)
 8000754:	6818      	ldr	r0, [r3, #0]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <ILI9341_SendData+0x58>)
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	f001 fb9d 	bl	8001e9c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <ILI9341_SendData+0x5c>)
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <ILI9341_SendData+0x60>)
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	f001 fb95 	bl	8001e9c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&lcdSPIhandle, &tmpCmd, 1, 5);
 8000772:	f107 010f 	add.w	r1, r7, #15
 8000776:	2305      	movs	r3, #5
 8000778:	2201      	movs	r2, #1
 800077a:	480b      	ldr	r0, [pc, #44]	; (80007a8 <ILI9341_SendData+0x64>)
 800077c:	f002 f86e 	bl	800285c <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <ILI9341_SendData+0x5c>)
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <ILI9341_SendData+0x60>)
 8000786:	881b      	ldrh	r3, [r3, #0]
 8000788:	2201      	movs	r2, #1
 800078a:	4619      	mov	r1, r3
 800078c:	f001 fb86 	bl	8001e9c <HAL_GPIO_WritePin>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	200000f4 	.word	0x200000f4
 800079c:	200000f8 	.word	0x200000f8
 80007a0:	200000ec 	.word	0x200000ec
 80007a4:	200000f0 	.word	0x200000f0
 80007a8:	20000094 	.word	0x20000094

080007ac <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}

//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4604      	mov	r4, r0
 80007b4:	4608      	mov	r0, r1
 80007b6:	4611      	mov	r1, r2
 80007b8:	461a      	mov	r2, r3
 80007ba:	4623      	mov	r3, r4
 80007bc:	80fb      	strh	r3, [r7, #6]
 80007be:	4603      	mov	r3, r0
 80007c0:	80bb      	strh	r3, [r7, #4]
 80007c2:	460b      	mov	r3, r1
 80007c4:	807b      	strh	r3, [r7, #2]
 80007c6:	4613      	mov	r3, r2
 80007c8:	803b      	strh	r3, [r7, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
 80007ca:	202a      	movs	r0, #42	; 0x2a
 80007cc:	f7ff ff86 	bl	80006dc <ILI9341_SendCommand>
  ILI9341_SendData(x1>>8);
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	0a1b      	lsrs	r3, r3, #8
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ffb3 	bl	8000744 <ILI9341_SendData>
  ILI9341_SendData(x1 & 0xFF);
 80007de:	88fb      	ldrh	r3, [r7, #6]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ffae 	bl	8000744 <ILI9341_SendData>
  ILI9341_SendData(x2>>8);
 80007e8:	887b      	ldrh	r3, [r7, #2]
 80007ea:	0a1b      	lsrs	r3, r3, #8
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ffa7 	bl	8000744 <ILI9341_SendData>
  ILI9341_SendData(x2 & 0xFF);
 80007f6:	887b      	ldrh	r3, [r7, #2]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffa2 	bl	8000744 <ILI9341_SendData>

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
 8000800:	202b      	movs	r0, #43	; 0x2b
 8000802:	f7ff ff6b 	bl	80006dc <ILI9341_SendCommand>
  ILI9341_SendData(y1>>8);
 8000806:	88bb      	ldrh	r3, [r7, #4]
 8000808:	0a1b      	lsrs	r3, r3, #8
 800080a:	b29b      	uxth	r3, r3
 800080c:	b2db      	uxtb	r3, r3
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff ff98 	bl	8000744 <ILI9341_SendData>
  ILI9341_SendData(y1 & 0xFF);
 8000814:	88bb      	ldrh	r3, [r7, #4]
 8000816:	b2db      	uxtb	r3, r3
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff93 	bl	8000744 <ILI9341_SendData>
  ILI9341_SendData(y2>>8);
 800081e:	883b      	ldrh	r3, [r7, #0]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	b29b      	uxth	r3, r3
 8000824:	b2db      	uxtb	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff8c 	bl	8000744 <ILI9341_SendData>
  ILI9341_SendData(y2 & 0xFF);
 800082c:	883b      	ldrh	r3, [r7, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff87 	bl	8000744 <ILI9341_SendData>
  ILI9341_SendCommand (ILI9341_GRAM);
 8000836:	202c      	movs	r0, #44	; 0x2c
 8000838:	f7ff ff50 	bl	80006dc <ILI9341_SendCommand>
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bd90      	pop	{r4, r7, pc}

08000844 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
 {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	4613      	mov	r3, r2
 8000852:	80fb      	strh	r3, [r7, #6]
	 //Copy SPI settings
	 memcpy(&lcdSPIhandle, spiLcdHandle, sizeof(*spiLcdHandle));
 8000854:	2258      	movs	r2, #88	; 0x58
 8000856:	68f9      	ldr	r1, [r7, #12]
 8000858:	4853      	ldr	r0, [pc, #332]	; (80009a8 <ILI9341_Init+0x164>)
 800085a:	f002 fdd3 	bl	8003404 <memcpy>
	 //CS pin
	 tftCS_GPIO = csPORT;
 800085e:	4a53      	ldr	r2, [pc, #332]	; (80009ac <ILI9341_Init+0x168>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	6013      	str	r3, [r2, #0]
	 tftCS_PIN = csPIN;
 8000864:	4a52      	ldr	r2, [pc, #328]	; (80009b0 <ILI9341_Init+0x16c>)
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	8013      	strh	r3, [r2, #0]
	 //DC pin
	 tftDC_GPIO = dcPORT;
 800086a:	4a52      	ldr	r2, [pc, #328]	; (80009b4 <ILI9341_Init+0x170>)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	6013      	str	r3, [r2, #0]
	 tftDC_PIN = dcPIN;
 8000870:	4a51      	ldr	r2, [pc, #324]	; (80009b8 <ILI9341_Init+0x174>)
 8000872:	8b3b      	ldrh	r3, [r7, #24]
 8000874:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 8000876:	4b4d      	ldr	r3, [pc, #308]	; (80009ac <ILI9341_Init+0x168>)
 8000878:	6818      	ldr	r0, [r3, #0]
 800087a:	4b4d      	ldr	r3, [pc, #308]	; (80009b0 <ILI9341_Init+0x16c>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	2201      	movs	r2, #1
 8000880:	4619      	mov	r1, r3
 8000882:	f001 fb0b 	bl	8001e9c <HAL_GPIO_WritePin>
	 //RESET pin
	 tftRESET_GPIO = resetPORT;
 8000886:	4a4d      	ldr	r2, [pc, #308]	; (80009bc <ILI9341_Init+0x178>)
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	6013      	str	r3, [r2, #0]
	 tftRESET_PIN = resetPIN;
 800088c:	4a4c      	ldr	r2, [pc, #304]	; (80009c0 <ILI9341_Init+0x17c>)
 800088e:	8c3b      	ldrh	r3, [r7, #32]
 8000890:	8013      	strh	r3, [r2, #0]
	 HAL_GPIO_WritePin(resetPORT, resetPIN, GPIO_PIN_SET);  //Turn LCD ON
 8000892:	8c3b      	ldrh	r3, [r7, #32]
 8000894:	2201      	movs	r2, #1
 8000896:	4619      	mov	r1, r3
 8000898:	69f8      	ldr	r0, [r7, #28]
 800089a:	f001 faff 	bl	8001e9c <HAL_GPIO_WritePin>

   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff ff1c 	bl	80006dc <ILI9341_SendCommand>
   HAL_Delay(100);
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f001 f82b 	bl	8001900 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_OFF); // display off
 80008aa:	2028      	movs	r0, #40	; 0x28
 80008ac:	f7ff ff16 	bl	80006dc <ILI9341_SendCommand>
   //------------power control------------------------------
   ILI9341_SendCommand (ILI9341_POWER1); // power control
 80008b0:	20c0      	movs	r0, #192	; 0xc0
 80008b2:	f7ff ff13 	bl	80006dc <ILI9341_SendCommand>
   ILI9341_SendData   (0x26); // GVDD = 4.75v
 80008b6:	2026      	movs	r0, #38	; 0x26
 80008b8:	f7ff ff44 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_POWER2); // power control
 80008bc:	20c1      	movs	r0, #193	; 0xc1
 80008be:	f7ff ff0d 	bl	80006dc <ILI9341_SendCommand>
   ILI9341_SendData   (0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 80008c2:	2011      	movs	r0, #17
 80008c4:	f7ff ff3e 	bl	8000744 <ILI9341_SendData>
   //--------------VCOM-------------------------------------
   ILI9341_SendCommand (ILI9341_VCOM1); // vcom control
 80008c8:	20c5      	movs	r0, #197	; 0xc5
 80008ca:	f7ff ff07 	bl	80006dc <ILI9341_SendCommand>
   ILI9341_SendData   (0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 80008ce:	2035      	movs	r0, #53	; 0x35
 80008d0:	f7ff ff38 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendData   (0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 80008d4:	203e      	movs	r0, #62	; 0x3e
 80008d6:	f7ff ff35 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_VCOM2); // vcom control
 80008da:	20c7      	movs	r0, #199	; 0xc7
 80008dc:	f7ff fefe 	bl	80006dc <ILI9341_SendCommand>
   ILI9341_SendData   (0xbe);
 80008e0:	20be      	movs	r0, #190	; 0xbe
 80008e2:	f7ff ff2f 	bl	8000744 <ILI9341_SendData>

   //------------memory access control------------------------
   ILI9341_SendCommand (ILI9341_MAC); // memory access control
 80008e6:	2036      	movs	r0, #54	; 0x36
 80008e8:	f7ff fef8 	bl	80006dc <ILI9341_SendCommand>
   ILI9341_SendData(0x48);
 80008ec:	2048      	movs	r0, #72	; 0x48
 80008ee:	f7ff ff29 	bl	8000744 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_PIXEL_FORMAT); // pixel format set
 80008f2:	203a      	movs	r0, #58	; 0x3a
 80008f4:	f7ff fef2 	bl	80006dc <ILI9341_SendCommand>
   ILI9341_SendData   (0x55); // 16bit /pixel
 80008f8:	2055      	movs	r0, #85	; 0x55
 80008fa:	f7ff ff23 	bl	8000744 <ILI9341_SendData>

	 ILI9341_SendCommand(ILI9341_FRC);
 80008fe:	20b1      	movs	r0, #177	; 0xb1
 8000900:	f7ff feec 	bl	80006dc <ILI9341_SendCommand>
   ILI9341_SendData(0);
 8000904:	2000      	movs	r0, #0
 8000906:	f7ff ff1d 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendData(0x1F);
 800090a:	201f      	movs	r0, #31
 800090c:	f7ff ff1a 	bl	8000744 <ILI9341_SendData>
   //-------------ddram ----------------------------
   ILI9341_SendCommand (ILI9341_COLUMN_ADDR); // column set
 8000910:	202a      	movs	r0, #42	; 0x2a
 8000912:	f7ff fee3 	bl	80006dc <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // x0_HIGH---0
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff ff14 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x0_LOW----0
 800091c:	2000      	movs	r0, #0
 800091e:	f7ff ff11 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // x1_HIGH---240
 8000922:	2000      	movs	r0, #0
 8000924:	f7ff ff0e 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendData   (0xEF); // x1_LOW----240
 8000928:	20ef      	movs	r0, #239	; 0xef
 800092a:	f7ff ff0b 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendCommand (ILI9341_PAGE_ADDR); // page address set
 800092e:	202b      	movs	r0, #43	; 0x2b
 8000930:	f7ff fed4 	bl	80006dc <ILI9341_SendCommand>
   ILI9341_SendData   (0x00); // y0_HIGH---0
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff05 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // y0_LOW----0
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff ff02 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendData   (0x01); // y1_HIGH---320
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff feff 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendData   (0x3F); // y1_LOW----320
 8000946:	203f      	movs	r0, #63	; 0x3f
 8000948:	f7ff fefc 	bl	8000744 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_TEARING_OFF); // tearing effect off
 800094c:	2034      	movs	r0, #52	; 0x34
 800094e:	f7ff fec5 	bl	80006dc <ILI9341_SendCommand>
   //LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
   //LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
   ILI9341_SendCommand (ILI9341_Entry_Mode_Set); // entry mode set
 8000952:	20b7      	movs	r0, #183	; 0xb7
 8000954:	f7ff fec2 	bl	80006dc <ILI9341_SendCommand>
   // Deep Standby Mode: OFF
   // Set the output level of gate driver G1-G320: Normal display
   // Low voltage detection: Disable
   ILI9341_SendData   (0x07);
 8000958:	2007      	movs	r0, #7
 800095a:	f7ff fef3 	bl	8000744 <ILI9341_SendData>
   //-----------------display------------------------
   ILI9341_SendCommand (ILI9341_DFC); // display function control
 800095e:	20b6      	movs	r0, #182	; 0xb6
 8000960:	f7ff febc 	bl	80006dc <ILI9341_SendCommand>
   //Set the scan mode in non-display area
   //Determine source/VCOM output in a non-display area in the partial display mode
   ILI9341_SendData   (0x0a);
 8000964:	200a      	movs	r0, #10
 8000966:	f7ff feed 	bl	8000744 <ILI9341_SendData>
   //Select whether the liquid crystal type is normally white type or normally black type
   //Sets the direction of scan by the gate driver in the range determined by SCN and NL
   //Select the shift direction of outputs from the source driver
   //Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
   //Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
   ILI9341_SendData   (0x82);
 800096a:	2082      	movs	r0, #130	; 0x82
 800096c:	f7ff feea 	bl	8000744 <ILI9341_SendData>
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
 8000970:	2027      	movs	r0, #39	; 0x27
 8000972:	f7ff fee7 	bl	8000744 <ILI9341_SendData>
   ILI9341_SendData   (0x00); // clock divisor
 8000976:	2000      	movs	r0, #0
 8000978:	f7ff fee4 	bl	8000744 <ILI9341_SendData>

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
 800097c:	2011      	movs	r0, #17
 800097e:	f7ff fead 	bl	80006dc <ILI9341_SendCommand>
   HAL_Delay(100);
 8000982:	2064      	movs	r0, #100	; 0x64
 8000984:	f000 ffbc 	bl	8001900 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
 8000988:	2029      	movs	r0, #41	; 0x29
 800098a:	f7ff fea7 	bl	80006dc <ILI9341_SendCommand>
   HAL_Delay(100);
 800098e:	2064      	movs	r0, #100	; 0x64
 8000990:	f000 ffb6 	bl	8001900 <HAL_Delay>
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
 8000994:	202c      	movs	r0, #44	; 0x2c
 8000996:	f7ff fea1 	bl	80006dc <ILI9341_SendCommand>
   HAL_Delay(5);
 800099a:	2005      	movs	r0, #5
 800099c:	f000 ffb0 	bl	8001900 <HAL_Delay>
 }
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000094 	.word	0x20000094
 80009ac:	200000ec 	.word	0x200000ec
 80009b0:	200000f0 	.word	0x200000f0
 80009b4:	200000f4 	.word	0x200000f4
 80009b8:	200000f8 	.word	0x200000f8
 80009bc:	200000fc 	.word	0x200000fc
 80009c0:	20000100 	.word	0x20000100

080009c4 <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
 80009ce:	460b      	mov	r3, r1
 80009d0:	80bb      	strh	r3, [r7, #4]
 80009d2:	4613      	mov	r3, r2
 80009d4:	807b      	strh	r3, [r7, #2]
  ILI9341_SetCursorPosition(x, y, x, y);
 80009d6:	88bb      	ldrh	r3, [r7, #4]
 80009d8:	88fa      	ldrh	r2, [r7, #6]
 80009da:	88b9      	ldrh	r1, [r7, #4]
 80009dc:	88f8      	ldrh	r0, [r7, #6]
 80009de:	f7ff fee5 	bl	80007ac <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 80009e2:	887b      	ldrh	r3, [r7, #2]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff feaa 	bl	8000744 <ILI9341_SendData>
	ILI9341_SendData(color&0xFF);
 80009f0:	887b      	ldrh	r3, [r7, #2]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fea5 	bl	8000744 <ILI9341_SendData>
}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <ILI9341_Fill_Rect>:
       ILI9341_SendData(color>>8);
				ILI9341_SendData(color&0xff);
	}
}
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) {
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b086      	sub	sp, #24
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	60f8      	str	r0, [r7, #12]
 8000a0a:	60b9      	str	r1, [r7, #8]
 8000a0c:	607a      	str	r2, [r7, #4]
 8000a0e:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	3301      	adds	r3, #1
 8000a18:	6839      	ldr	r1, [r7, #0]
 8000a1a:	68ba      	ldr	r2, [r7, #8]
 8000a1c:	1a8a      	subs	r2, r1, r2
 8000a1e:	3201      	adds	r2, #1
 8000a20:	fb02 f303 	mul.w	r3, r2, r3
 8000a24:	617b      	str	r3, [r7, #20]
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8000a2c:	d902      	bls.n	8000a34 <ILI9341_Fill_Rect+0x32>
 8000a2e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8000a32:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	b298      	uxth	r0, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	b299      	uxth	r1, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	b29a      	uxth	r2, r3
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	f7ff feb2 	bl	80007ac <ILI9341_SetCursorPosition>
	while (n) {
 8000a48:	e00e      	b.n	8000a68 <ILI9341_Fill_Rect+0x66>
			n--;
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
      ILI9341_SendData(color>>8);
 8000a50:	8c3b      	ldrh	r3, [r7, #32]
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe73 	bl	8000744 <ILI9341_SendData>
				ILI9341_SendData(color&0xff);
 8000a5e:	8c3b      	ldrh	r3, [r7, #32]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff fe6e 	bl	8000744 <ILI9341_SendData>
	while (n) {
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1ed      	bne.n	8000a4a <ILI9341_Fill_Rect+0x48>
	}
}
 8000a6e:	bf00      	nop
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8000a78:	b5b0      	push	{r4, r5, r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af02      	add	r7, sp, #8
 8000a7e:	4604      	mov	r4, r0
 8000a80:	4608      	mov	r0, r1
 8000a82:	4611      	mov	r1, r2
 8000a84:	461a      	mov	r2, r3
 8000a86:	4623      	mov	r3, r4
 8000a88:	80fb      	strh	r3, [r7, #6]
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80bb      	strh	r3, [r7, #4]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	70fb      	strb	r3, [r7, #3]
 8000a92:	4613      	mov	r3, r2
 8000a94:	803b      	strh	r3, [r7, #0]
	if(rotationNum == 1 || rotationNum ==3)
 8000a96:	4b9a      	ldr	r3, [pc, #616]	; (8000d00 <ILI9341_drawChar+0x288>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d003      	beq.n	8000aa6 <ILI9341_drawChar+0x2e>
 8000a9e:	4b98      	ldr	r3, [pc, #608]	; (8000d00 <ILI9341_drawChar+0x288>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d121      	bne.n	8000aea <ILI9341_drawChar+0x72>
	{
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aaa:	2bef      	cmp	r3, #239	; 0xef
 8000aac:	f300 8121 	bgt.w	8000cf2 <ILI9341_drawChar+0x27a>
 8000ab0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ab4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ab8:	f280 811b 	bge.w	8000cf2 <ILI9341_drawChar+0x27a>
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
 8000abc:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000ac0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	440b      	add	r3, r1
 8000ace:	3b01      	subs	r3, #1
     (y >= ILI9341_HEIGHT)           || // Clip bottom
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f2c0 810e 	blt.w	8000cf2 <ILI9341_drawChar+0x27a>
     ((y + 8 * size - 1) < 0))   // Clip top
 8000ad6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ada:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	4413      	add	r3, r2
 8000ae2:	3b01      	subs	r3, #1
     ((x + 6 * size - 1) < 0) || // Clip left
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	da23      	bge.n	8000b30 <ILI9341_drawChar+0xb8>
    return;
 8000ae8:	e103      	b.n	8000cf2 <ILI9341_drawChar+0x27a>
	}
	else
	{
		if((y >= ILI9341_WIDTH)            || // Clip right
 8000aea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000aee:	2bef      	cmp	r3, #239	; 0xef
 8000af0:	f300 8101 	bgt.w	8000cf6 <ILI9341_drawChar+0x27e>
 8000af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000af8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000afc:	f280 80fb 	bge.w	8000cf6 <ILI9341_drawChar+0x27e>
     (x >= ILI9341_HEIGHT)           || // Clip bottom
     ((y + 6 * size - 1) < 0) || // Clip left
 8000b00:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000b04:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000b08:	4613      	mov	r3, r2
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	440b      	add	r3, r1
 8000b12:	3b01      	subs	r3, #1
     (x >= ILI9341_HEIGHT)           || // Clip bottom
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f2c0 80ee 	blt.w	8000cf6 <ILI9341_drawChar+0x27e>
     ((x + 8 * size - 1) < 0))   // Clip top
 8000b1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000b1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4413      	add	r3, r2
 8000b26:	3b01      	subs	r3, #1
     ((y + 6 * size - 1) < 0) || // Clip left
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f2c0 80e4 	blt.w	8000cf6 <ILI9341_drawChar+0x27e>
 8000b2e:	e000      	b.n	8000b32 <ILI9341_drawChar+0xba>
		if((x >= ILI9341_WIDTH)            || // Clip right
 8000b30:	bf00      	nop
    return;
	}


  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000b32:	4b74      	ldr	r3, [pc, #464]	; (8000d04 <ILI9341_drawChar+0x28c>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	f083 0301 	eor.w	r3, r3, #1
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d005      	beq.n	8000b4c <ILI9341_drawChar+0xd4>
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	2baf      	cmp	r3, #175	; 0xaf
 8000b44:	d902      	bls.n	8000b4c <ILI9341_drawChar+0xd4>
 8000b46:	78fb      	ldrb	r3, [r7, #3]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	70fb      	strb	r3, [r7, #3]

  for (int8_t i=0; i<6; i++ ) {
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e0c9      	b.n	8000ce6 <ILI9341_drawChar+0x26e>
    uint8_t line;
    if (i == 5)
 8000b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b56:	2b05      	cmp	r3, #5
 8000b58:	d102      	bne.n	8000b60 <ILI9341_drawChar+0xe8>
      line = 0x0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73bb      	strb	r3, [r7, #14]
 8000b5e:	e00b      	b.n	8000b78 <ILI9341_drawChar+0x100>
    else
      line = pgm_read_byte(font1+(c*5)+i);
 8000b60:	78fa      	ldrb	r2, [r7, #3]
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	461a      	mov	r2, r3
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a65      	ldr	r2, [pc, #404]	; (8000d08 <ILI9341_drawChar+0x290>)
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000b78:	2300      	movs	r3, #0
 8000b7a:	737b      	strb	r3, [r7, #13]
 8000b7c:	e0a8      	b.n	8000cd0 <ILI9341_drawChar+0x258>
      if (line & 0x1) {
 8000b7e:	7bbb      	ldrb	r3, [r7, #14]
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d04b      	beq.n	8000c20 <ILI9341_drawChar+0x1a8>
        if (size == 1) // default size
 8000b88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d110      	bne.n	8000bb2 <ILI9341_drawChar+0x13a>
          ILI9341_DrawPixel(x+i, y+j, color);
 8000b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	88fb      	ldrh	r3, [r7, #6]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b298      	uxth	r0, r3
 8000b9c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	88bb      	ldrh	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	883a      	ldrh	r2, [r7, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	f7ff ff0a 	bl	80009c4 <ILI9341_DrawPixel>
 8000bb0:	e085      	b.n	8000cbe <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 8000bb2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000bbe:	fb01 f303 	mul.w	r3, r1, r3
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000bca:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000bce:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000bd2:	fb01 f303 	mul.w	r3, r1, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	461c      	mov	r4, r3
 8000bda:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be2:	441a      	add	r2, r3
 8000be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be8:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000bec:	fb01 f303 	mul.w	r3, r1, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	461d      	mov	r5, r3
 8000bf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000bf8:	1c5a      	adds	r2, r3, #1
 8000bfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bfe:	441a      	add	r2, r3
 8000c00:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c04:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000c08:	fb01 f303 	mul.w	r3, r1, r3
 8000c0c:	4413      	add	r3, r2
 8000c0e:	461a      	mov	r2, r3
 8000c10:	883b      	ldrh	r3, [r7, #0]
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	4613      	mov	r3, r2
 8000c16:	462a      	mov	r2, r5
 8000c18:	4621      	mov	r1, r4
 8000c1a:	f7ff fef2 	bl	8000a02 <ILI9341_Fill_Rect>
 8000c1e:	e04e      	b.n	8000cbe <ILI9341_drawChar+0x246>
        }
      } else if (bg != color) {
 8000c20:	8c3a      	ldrh	r2, [r7, #32]
 8000c22:	883b      	ldrh	r3, [r7, #0]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d04a      	beq.n	8000cbe <ILI9341_drawChar+0x246>
        if (size == 1) // default size
 8000c28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d110      	bne.n	8000c52 <ILI9341_drawChar+0x1da>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8000c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	4413      	add	r3, r2
 8000c3a:	b298      	uxth	r0, r3
 8000c3c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	8c3a      	ldrh	r2, [r7, #32]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff feba 	bl	80009c4 <ILI9341_DrawPixel>
 8000c50:	e035      	b.n	8000cbe <ILI9341_drawChar+0x246>
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000c52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000c5e:	fb01 f303 	mul.w	r3, r1, r3
 8000c62:	4413      	add	r3, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c6a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c6e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000c72:	fb01 f303 	mul.w	r3, r1, r3
 8000c76:	4413      	add	r3, r2
 8000c78:	461c      	mov	r4, r3
 8000c7a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c82:	441a      	add	r2, r3
 8000c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c88:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000c8c:	fb01 f303 	mul.w	r3, r1, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	461d      	mov	r5, r3
 8000c94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c9e:	441a      	add	r2, r3
 8000ca0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ca4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8000ca8:	fb01 f303 	mul.w	r3, r1, r3
 8000cac:	4413      	add	r3, r2
 8000cae:	461a      	mov	r2, r3
 8000cb0:	8c3b      	ldrh	r3, [r7, #32]
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	462a      	mov	r2, r5
 8000cb8:	4621      	mov	r1, r4
 8000cba:	f7ff fea2 	bl	8000a02 <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8000cbe:	7bbb      	ldrb	r3, [r7, #14]
 8000cc0:	085b      	lsrs	r3, r3, #1
 8000cc2:	73bb      	strb	r3, [r7, #14]
    for (int8_t j = 0; j<8; j++) {
 8000cc4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	3301      	adds	r3, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	737b      	strb	r3, [r7, #13]
 8000cd0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000cd4:	2b07      	cmp	r3, #7
 8000cd6:	f77f af52 	ble.w	8000b7e <ILI9341_drawChar+0x106>
  for (int8_t i=0; i<6; i++ ) {
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	f77f af31 	ble.w	8000b52 <ILI9341_drawChar+0xda>
 8000cf0:	e002      	b.n	8000cf8 <ILI9341_drawChar+0x280>
    return;
 8000cf2:	bf00      	nop
 8000cf4:	e000      	b.n	8000cf8 <ILI9341_drawChar+0x280>
    return;
 8000cf6:	bf00      	nop
    }
  }
}
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000000 	.word	0x20000000
 8000d04:	20000090 	.word	0x20000090
 8000d08:	08003dc0 	.word	0x08003dc0

08000d0c <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	4608      	mov	r0, r1
 8000d16:	4611      	mov	r1, r2
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	817b      	strh	r3, [r7, #10]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	813b      	strh	r3, [r7, #8]
 8000d22:	4613      	mov	r3, r2
 8000d24:	80fb      	strh	r3, [r7, #6]
	int16_t offset;
	offset = size*6;
 8000d26:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	0052      	lsls	r2, r2, #1
 8000d30:	4413      	add	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	82fb      	strh	r3, [r7, #22]
 8000d3c:	e01a      	b.n	8000d74 <ILI9341_printText+0x68>
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 8000d3e:	8abb      	ldrh	r3, [r7, #20]
 8000d40:	8afa      	ldrh	r2, [r7, #22]
 8000d42:	fb12 f303 	smulbb	r3, r2, r3
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	897b      	ldrh	r3, [r7, #10]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	b218      	sxth	r0, r3
 8000d50:	8afb      	ldrh	r3, [r7, #22]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	4413      	add	r3, r2
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	88fc      	ldrh	r4, [r7, #6]
 8000d5a:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000d5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	4623      	mov	r3, r4
 8000d6a:	f7ff fe85 	bl	8000a78 <ILI9341_drawChar>
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 8000d6e:	8afb      	ldrh	r3, [r7, #22]
 8000d70:	3301      	adds	r3, #1
 8000d72:	82fb      	strh	r3, [r7, #22]
 8000d74:	8afb      	ldrh	r3, [r7, #22]
 8000d76:	2b27      	cmp	r3, #39	; 0x27
 8000d78:	d805      	bhi.n	8000d86 <ILI9341_printText+0x7a>
 8000d7a:	8afb      	ldrh	r3, [r7, #22]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d1db      	bne.n	8000d3e <ILI9341_printText+0x32>
	}
}
 8000d86:	bf00      	nop
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd90      	pop	{r4, r7, pc}
	...

08000d90 <ILI9341_setRotation>:
	}
}

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	switch(rotate)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d832      	bhi.n	8000e08 <ILI9341_setRotation+0x78>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <ILI9341_setRotation+0x18>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dcd 	.word	0x08000dcd
 8000db0:	08000de1 	.word	0x08000de1
 8000db4:	08000df5 	.word	0x08000df5
	{
		case 1:
			rotationNum = 1;
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <ILI9341_setRotation+0x94>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000dbe:	2036      	movs	r0, #54	; 0x36
 8000dc0:	f7ff fc8c 	bl	80006dc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000dc4:	2088      	movs	r0, #136	; 0x88
 8000dc6:	f7ff fcbd 	bl	8000744 <ILI9341_SendData>
			break;
 8000dca:	e027      	b.n	8000e1c <ILI9341_setRotation+0x8c>
		case 2:
			rotationNum = 2;
 8000dcc:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <ILI9341_setRotation+0x94>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000dd2:	2036      	movs	r0, #54	; 0x36
 8000dd4:	f7ff fc82 	bl	80006dc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000dd8:	2028      	movs	r0, #40	; 0x28
 8000dda:	f7ff fcb3 	bl	8000744 <ILI9341_SendData>
			break;
 8000dde:	e01d      	b.n	8000e1c <ILI9341_setRotation+0x8c>
		case 3:
			rotationNum = 3;
 8000de0:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <ILI9341_setRotation+0x94>)
 8000de2:	2203      	movs	r2, #3
 8000de4:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000de6:	2036      	movs	r0, #54	; 0x36
 8000de8:	f7ff fc78 	bl	80006dc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 8000dec:	2048      	movs	r0, #72	; 0x48
 8000dee:	f7ff fca9 	bl	8000744 <ILI9341_SendData>
			break;
 8000df2:	e013      	b.n	8000e1c <ILI9341_setRotation+0x8c>
		case 4:
			rotationNum = 4;
 8000df4:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <ILI9341_setRotation+0x94>)
 8000df6:	2204      	movs	r2, #4
 8000df8:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000dfa:	2036      	movs	r0, #54	; 0x36
 8000dfc:	f7ff fc6e 	bl	80006dc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8000e00:	20e8      	movs	r0, #232	; 0xe8
 8000e02:	f7ff fc9f 	bl	8000744 <ILI9341_SendData>
			break;
 8000e06:	e009      	b.n	8000e1c <ILI9341_setRotation+0x8c>
		default:
			rotationNum = 1;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <ILI9341_setRotation+0x94>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
 8000e0e:	2036      	movs	r0, #54	; 0x36
 8000e10:	f7ff fc64 	bl	80006dc <ILI9341_SendCommand>
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 8000e14:	2088      	movs	r0, #136	; 0x88
 8000e16:	f7ff fc95 	bl	8000744 <ILI9341_SendData>
			break;
 8000e1a:	bf00      	nop
	}
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000000 	.word	0x20000000

08000e28 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000e2c:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <Ringbuf_init+0x3c>)
 8000e2e:	4a0e      	ldr	r2, [pc, #56]	; (8000e68 <Ringbuf_init+0x40>)
 8000e30:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <Ringbuf_init+0x44>)
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <Ringbuf_init+0x48>)
 8000e36:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000e38:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <Ringbuf_init+0x4c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	695a      	ldr	r2, [r3, #20]
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <Ringbuf_init+0x4c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0201 	orr.w	r2, r2, #1
 8000e46:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <Ringbuf_init+0x4c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <Ringbuf_init+0x4c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f042 0220 	orr.w	r2, r2, #32
 8000e56:	60da      	str	r2, [r3, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200001a4 	.word	0x200001a4
 8000e68:	20000104 	.word	0x20000104
 8000e6c:	200001a0 	.word	0x200001a0
 8000e70:	2000014c 	.word	0x2000014c
 8000e74:	200001a8 	.word	0x200001a8

08000e78 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	3301      	adds	r3, #1
 8000e8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e8e:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d007      	beq.n	8000eaa <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	683a      	ldr	r2, [r7, #0]
 8000ea0:	79f9      	ldrb	r1, [r7, #7]
 8000ea2:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <Uart_read+0x4c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <Uart_read+0x4c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d102      	bne.n	8000ed4 <Uart_read+0x1c>
  {
    return -1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed2:	e010      	b.n	8000ef6 <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <Uart_read+0x4c>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <Uart_read+0x4c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	5cd3      	ldrb	r3, [r2, r3]
 8000ee0:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <Uart_read+0x4c>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <Uart_read+0x4c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ef2:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	200001a4 	.word	0x200001a4

08000f08 <Uart_write>:

void Uart_write(int c)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db21      	blt.n	8000f5a <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8000f16:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <Uart_write+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f22:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8000f24:	bf00      	nop
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <Uart_write+0x60>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d0f9      	beq.n	8000f26 <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8000f32:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <Uart_write+0x60>)
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <Uart_write+0x60>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	b2c9      	uxtb	r1, r1
 8000f40:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <Uart_write+0x60>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <Uart_write+0x64>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <Uart_write+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f58:	60da      	str	r2, [r3, #12]
	}
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200001a0 	.word	0x200001a0
 8000f6c:	200001a8 	.word	0x200001a8

08000f70 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <IsDataAvailable+0x28>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <IsDataAvailable+0x28>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200001a4 	.word	0x200001a4

08000f9c <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000fa4:	e006      	b.n	8000fb4 <Uart_sendstring+0x18>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	1c5a      	adds	r2, r3, #1
 8000faa:	607a      	str	r2, [r7, #4]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffaa 	bl	8000f08 <Uart_write>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1f4      	bne.n	8000fa6 <Uart_sendstring+0xa>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <Uart_peek>:

  while(*s) Uart_write(*s++);
}

int Uart_peek()
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <Uart_peek+0x30>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <Uart_peek+0x30>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d102      	bne.n	8000fde <Uart_peek+0x1a>
  {
    return -1;
 8000fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fdc:	e005      	b.n	8000fea <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <Uart_peek+0x30>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <Uart_peek+0x30>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe8:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	200001a4 	.word	0x200001a4

08000ff8 <Copy_upto>:


int Copy_upto (char *string, char *buffertocopyinto)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001002:	2300      	movs	r3, #0
 8001004:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff f8e2 	bl	80001d0 <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

again:
	while (!IsDataAvailable());
 8001014:	bf00      	nop
 8001016:	f7ff ffab 	bl	8000f70 <IsDataAvailable>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0fa      	beq.n	8001016 <Copy_upto+0x1e>
	while (Uart_peek() != string[so_far])
 8001020:	e01b      	b.n	800105a <Copy_upto+0x62>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <Copy_upto+0xe4>)
 8001024:	6819      	ldr	r1, [r3, #0]
 8001026:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <Copy_upto+0xe4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	6838      	ldr	r0, [r7, #0]
 8001030:	4403      	add	r3, r0
 8001032:	5c8a      	ldrb	r2, [r1, r2]
 8001034:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001036:	4b29      	ldr	r3, [pc, #164]	; (80010dc <Copy_upto+0xe4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103c:	1c5a      	adds	r2, r3, #1
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <Copy_upto+0xe4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001046:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	3301      	adds	r3, #1
 800104c:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 800104e:	bf00      	nop
 8001050:	f7ff ff8e 	bl	8000f70 <IsDataAvailable>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0fa      	beq.n	8001050 <Copy_upto+0x58>
	while (Uart_peek() != string[so_far])
 800105a:	f7ff ffb3 	bl	8000fc4 <Uart_peek>
 800105e:	4601      	mov	r1, r0
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4299      	cmp	r1, r3
 800106a:	d1da      	bne.n	8001022 <Copy_upto+0x2a>

		}
	while (Uart_peek() == string [so_far])
 800106c:	e019      	b.n	80010a2 <Copy_upto+0xaa>
	{
		so_far++;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001074:	f7ff ff20 	bl	8000eb8 <Uart_read>
 8001078:	4601      	mov	r1, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	613a      	str	r2, [r7, #16]
 8001080:	461a      	mov	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	4413      	add	r3, r2
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	429a      	cmp	r2, r3
 8001090:	d101      	bne.n	8001096 <Copy_upto+0x9e>
 8001092:	2301      	movs	r3, #1
 8001094:	e01d      	b.n	80010d2 <Copy_upto+0xda>
		while (!IsDataAvailable());
 8001096:	bf00      	nop
 8001098:	f7ff ff6a 	bl	8000f70 <IsDataAvailable>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d0fa      	beq.n	8001098 <Copy_upto+0xa0>
	while (Uart_peek() == string [so_far])
 80010a2:	f7ff ff8f 	bl	8000fc4 <Uart_peek>
 80010a6:	4601      	mov	r1, r0
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4299      	cmp	r1, r3
 80010b2:	d0dc      	beq.n	800106e <Copy_upto+0x76>
	}

	if (so_far != len)
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d002      	beq.n	80010c2 <Copy_upto+0xca>
	{
		so_far = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
		goto again;
 80010c0:	e7a8      	b.n	8001014 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d101      	bne.n	80010ce <Copy_upto+0xd6>
 80010ca:	2301      	movs	r3, #1
 80010cc:	e001      	b.n	80010d2 <Copy_upto+0xda>
	else return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001a4 	.word	0x200001a4

080010e0 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff f86f 	bl	80001d0 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 80010f6:	bf00      	nop
 80010f8:	f7ff ff3a 	bl	8000f70 <IsDataAvailable>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0fa      	beq.n	80010f8 <Wait_for+0x18>
	if (Uart_peek() != string[so_far])
 8001102:	f7ff ff5f 	bl	8000fc4 <Uart_peek>
 8001106:	4601      	mov	r1, r0
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4299      	cmp	r1, r3
 8001112:	d01a      	beq.n	800114a <Wait_for+0x6a>
	{
		 _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE ;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <Wait_for+0xa4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <Wait_for+0xa4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001124:	645a      	str	r2, [r3, #68]	; 0x44
		goto again;
 8001126:	e7e6      	b.n	80010f6 <Wait_for+0x16>

	}
	while (Uart_peek() == string [so_far])
	{
		so_far++;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3301      	adds	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
		Uart_read();
 800112e:	f7ff fec3 	bl	8000eb8 <Uart_read>
		if (so_far == len) return 1;
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	429a      	cmp	r2, r3
 8001138:	d101      	bne.n	800113e <Wait_for+0x5e>
 800113a:	2301      	movs	r3, #1
 800113c:	e01d      	b.n	800117a <Wait_for+0x9a>
		while (!IsDataAvailable());
 800113e:	bf00      	nop
 8001140:	f7ff ff16 	bl	8000f70 <IsDataAvailable>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0fa      	beq.n	8001140 <Wait_for+0x60>
	while (Uart_peek() == string [so_far])
 800114a:	f7ff ff3b 	bl	8000fc4 <Uart_peek>
 800114e:	4601      	mov	r1, r0
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4299      	cmp	r1, r3
 800115a:	d0e5      	beq.n	8001128 <Wait_for+0x48>
	}

	if (so_far != len)
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	429a      	cmp	r2, r3
 8001162:	d002      	beq.n	800116a <Wait_for+0x8a>
	{
		so_far = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
		goto again;
 8001168:	e7c5      	b.n	80010f6 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	429a      	cmp	r2, r3
 8001170:	d101      	bne.n	8001176 <Wait_for+0x96>
 8001172:	2301      	movs	r3, #1
 8001174:	e001      	b.n	800117a <Wait_for+0x9a>
	else return -1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200001a4 	.word	0x200001a4

08001188 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d013      	beq.n	80011d2 <Uart_isr+0x4a>
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	f003 0320 	and.w	r3, r3, #32
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00e      	beq.n	80011d2 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <Uart_isr+0xac>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	4611      	mov	r1, r2
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe54 	bl	8000e78 <store_char>
        return;
 80011d0:	e02c      	b.n	800122c <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d027      	beq.n	800122c <Uart_isr+0xa4>
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d022      	beq.n	800122c <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <Uart_isr+0xb0>)
 80011e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ea:	4b13      	ldr	r3, [pc, #76]	; (8001238 <Uart_isr+0xb0>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d108      	bne.n	8001204 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001200:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001202:	e013      	b.n	800122c <Uart_isr+0xa4>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <Uart_isr+0xb0>)
 8001206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001208:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <Uart_isr+0xb0>)
 800120a:	5cd3      	ldrb	r3, [r2, r3]
 800120c:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <Uart_isr+0xb0>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	3301      	adds	r3, #1
 8001214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <Uart_isr+0xb0>)
 800121a:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->SR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	7bba      	ldrb	r2, [r7, #14]
 8001228:	605a      	str	r2, [r3, #4]
    	return;
 800122a:	bf00      	nop
    }
}
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001a4 	.word	0x200001a4
 8001238:	2000014c 	.word	0x2000014c

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001242:	f000 faeb 	bl	800181c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001246:	f000 f83b 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124a:	f000 f903 	bl	8001454 <MX_GPIO_Init>
  MX_SPI1_Init();
 800124e:	f000 f8a1 	bl	8001394 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001252:	f000 f8d5 	bl	8001400 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init(&hspi1, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin,
 8001256:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <main+0x64>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <main+0x64>)
 8001266:	2240      	movs	r2, #64	; 0x40
 8001268:	490e      	ldr	r1, [pc, #56]	; (80012a4 <main+0x68>)
 800126a:	480f      	ldr	r0, [pc, #60]	; (80012a8 <main+0x6c>)
 800126c:	f7ff faea 	bl	8000844 <ILI9341_Init>
		  LCD_RST_GPIO_Port, LCD_RST_Pin);
  ILI9341_setRotation(2);
 8001270:	2002      	movs	r0, #2
 8001272:	f7ff fd8d 	bl	8000d90 <ILI9341_setRotation>
  ILI9341_printText("Connecting....", 20, 30, COLOR_WHITE, COLOR_WHITE, 1);
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001284:	221e      	movs	r2, #30
 8001286:	2114      	movs	r1, #20
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <main+0x70>)
 800128a:	f7ff fd3f 	bl	8000d0c <ILI9341_printText>
  ESP_Init("calis", "12345678");
 800128e:	4908      	ldr	r1, [pc, #32]	; (80012b0 <main+0x74>)
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <main+0x78>)
 8001292:	f7ff f975 	bl	8000580 <ESP_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ESP_GetData ("T5QZHSI8HXLC4286", Total);
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <main+0x7c>)
 8001298:	4808      	ldr	r0, [pc, #32]	; (80012bc <main+0x80>)
 800129a:	f7ff f9b5 	bl	8000608 <ESP_GetData>
 800129e:	e7fa      	b.n	8001296 <main+0x5a>
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020400 	.word	0x40020400
 80012a8:	20000254 	.word	0x20000254
 80012ac:	08003d88 	.word	0x08003d88
 80012b0:	08003d98 	.word	0x08003d98
 80012b4:	08003da4 	.word	0x08003da4
 80012b8:	200001e8 	.word	0x200001e8
 80012bc:	08003dac 	.word	0x08003dac

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	; 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	2230      	movs	r2, #48	; 0x30
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 f8a3 	bl	800341a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <SystemClock_Config+0xcc>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a27      	ldr	r2, [pc, #156]	; (800138c <SystemClock_Config+0xcc>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
 80012f4:	4b25      	ldr	r3, [pc, #148]	; (800138c <SystemClock_Config+0xcc>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <SystemClock_Config+0xd0>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a21      	ldr	r2, [pc, #132]	; (8001390 <SystemClock_Config+0xd0>)
 800130a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <SystemClock_Config+0xd0>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800131c:	2301      	movs	r3, #1
 800131e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001326:	2302      	movs	r3, #2
 8001328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800132e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001334:	2364      	movs	r3, #100	; 0x64
 8001336:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001338:	2302      	movs	r3, #2
 800133a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800133c:	2307      	movs	r3, #7
 800133e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	4618      	mov	r0, r3
 8001346:	f000 fdc3 	bl	8001ed0 <HAL_RCC_OscConfig>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001350:	f000 f8f6 	bl	8001540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001354:	230f      	movs	r3, #15
 8001356:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001358:	2302      	movs	r3, #2
 800135a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001360:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001364:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800136c:	f107 030c 	add.w	r3, r7, #12
 8001370:	2103      	movs	r1, #3
 8001372:	4618      	mov	r0, r3
 8001374:	f001 f81c 	bl	80023b0 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800137e:	f000 f8df 	bl	8001540 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3750      	adds	r7, #80	; 0x50
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001398:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_SPI1_Init+0x64>)
 800139a:	4a18      	ldr	r2, [pc, #96]	; (80013fc <MX_SPI1_Init+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013c6:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013e0:	220a      	movs	r2, #10
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013e4:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MX_SPI1_Init+0x64>)
 80013e6:	f001 f9d5 	bl	8002794 <HAL_SPI_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013f0:	f000 f8a6 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000254 	.word	0x20000254
 80013fc:	40013000 	.word	0x40013000

08001400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001404:	4b11      	ldr	r3, [pc, #68]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001406:	4a12      	ldr	r2, [pc, #72]	; (8001450 <MX_USART1_UART_Init+0x50>)
 8001408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800140c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800141e:	4b0b      	ldr	r3, [pc, #44]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001426:	220c      	movs	r2, #12
 8001428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800142a:	4b08      	ldr	r3, [pc, #32]	; (800144c <MX_USART1_UART_Init+0x4c>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001436:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_USART1_UART_Init+0x4c>)
 8001438:	f001 fbf0 	bl	8002c1c <HAL_UART_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001442:	f000 f87d 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200001a8 	.word	0x200001a8
 8001450:	40011000 	.word	0x40011000

08001454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b31      	ldr	r3, [pc, #196]	; (8001534 <MX_GPIO_Init+0xe0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a30      	ldr	r2, [pc, #192]	; (8001534 <MX_GPIO_Init+0xe0>)
 8001474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <MX_GPIO_Init+0xe0>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <MX_GPIO_Init+0xe0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a29      	ldr	r2, [pc, #164]	; (8001534 <MX_GPIO_Init+0xe0>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <MX_GPIO_Init+0xe0>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <MX_GPIO_Init+0xe0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <MX_GPIO_Init+0xe0>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <MX_GPIO_Init+0xe0>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_GPIO_Init+0xe0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a1b      	ldr	r2, [pc, #108]	; (8001534 <MX_GPIO_Init+0xe0>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_GPIO_Init+0xe0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 7120 	mov.w	r1, #640	; 0x280
 80014e0:	4815      	ldr	r0, [pc, #84]	; (8001538 <MX_GPIO_Init+0xe4>)
 80014e2:	f000 fcdb 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	4814      	ldr	r0, [pc, #80]	; (800153c <MX_GPIO_Init+0xe8>)
 80014ec:	f000 fcd6 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 80014f0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80014f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	480b      	ldr	r0, [pc, #44]	; (8001538 <MX_GPIO_Init+0xe4>)
 800150a:	f000 fb2d 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800150e:	2340      	movs	r3, #64	; 0x40
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_GPIO_Init+0xe8>)
 8001526:	f000 fb1f 	bl	8001b68 <HAL_GPIO_Init>

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40020800 	.word	0x40020800
 800153c:	40020400 	.word	0x40020400

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001546:	e7fe      	b.n	8001546 <Error_Handler+0x6>

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_MspInit+0x4c>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x4c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001586:	2007      	movs	r0, #7
 8001588:	f000 faac 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_SPI_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12b      	bne.n	8001612 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a10      	ldr	r2, [pc, #64]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_SPI_MspInit+0x88>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015f2:	23e0      	movs	r3, #224	; 0xe0
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001602:	2305      	movs	r3, #5
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4805      	ldr	r0, [pc, #20]	; (8001624 <HAL_SPI_MspInit+0x8c>)
 800160e:	f000 faab 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	; 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40013000 	.word	0x40013000
 8001620:	40023800 	.word	0x40023800
 8001624:	40020000 	.word	0x40020000

08001628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1d      	ldr	r2, [pc, #116]	; (80016bc <HAL_UART_MspInit+0x94>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d134      	bne.n	80016b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_UART_MspInit+0x98>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_UART_MspInit+0x98>)
 8001654:	f043 0310 	orr.w	r3, r3, #16
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0x98>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <HAL_UART_MspInit+0x98>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_UART_MspInit+0x98>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <HAL_UART_MspInit+0x98>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001682:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001694:	2307      	movs	r3, #7
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4809      	ldr	r0, [pc, #36]	; (80016c4 <HAL_UART_MspInit+0x9c>)
 80016a0:	f000 fa62 	bl	8001b68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2025      	movs	r0, #37	; 0x25
 80016aa:	f000 fa26 	bl	8001afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016ae:	2025      	movs	r0, #37	; 0x25
 80016b0:	f000 fa3f 	bl	8001b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40020000 	.word	0x40020000

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <NMI_Handler+0x4>

080016ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001714:	f000 f8d4 	bl	80018c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}

0800171c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <USART1_IRQHandler+0x10>)
 8001722:	f7ff fd31 	bl	8001188 <Uart_isr>
	return;
 8001726:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200001a8 	.word	0x200001a8

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	; (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f001 fe26 	bl	80033b0 <__errno>
 8001764:	4602      	mov	r2, r0
 8001766:	230c      	movs	r3, #12
 8001768:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20020000 	.word	0x20020000
 8001790:	00000400 	.word	0x00000400
 8001794:	20000194 	.word	0x20000194
 8001798:	200002c0 	.word	0x200002c0

0800179c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <SystemInit+0x28>)
 80017a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a6:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <SystemInit+0x28>)
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <SystemInit+0x28>)
 80017b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b6:	609a      	str	r2, [r3, #8]
#endif
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017ce:	e003      	b.n	80017d8 <LoopCopyDataInit>

080017d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017d6:	3104      	adds	r1, #4

080017d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017d8:	480b      	ldr	r0, [pc, #44]	; (8001808 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017e0:	d3f6      	bcc.n	80017d0 <CopyDataInit>
  ldr  r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017e4:	e002      	b.n	80017ec <LoopFillZerobss>

080017e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017e8:	f842 3b04 	str.w	r3, [r2], #4

080017ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017f0:	d3f9      	bcc.n	80017e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ffd3 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f001 fde1 	bl	80033bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff fd1f 	bl	800123c <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001800:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001804:	0800431c 	.word	0x0800431c
  ldr  r0, =_sdata
 8001808:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800180c:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001810:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001814:	200002c0 	.word	0x200002c0

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_Init+0x40>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <HAL_Init+0x40>)
 8001826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_Init+0x40>)
 8001832:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001836:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <HAL_Init+0x40>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001842:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001844:	2003      	movs	r0, #3
 8001846:	f000 f94d 	bl	8001ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800184a:	2000      	movs	r0, #0
 800184c:	f000 f808 	bl	8001860 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001850:	f7ff fe7a 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023c00 	.word	0x40023c00

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001868:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_InitTick+0x54>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_InitTick+0x58>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001876:	fbb3 f3f1 	udiv	r3, r3, r1
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f965 	bl	8001b4e <HAL_SYSTICK_Config>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e00e      	b.n	80018ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b0f      	cmp	r3, #15
 8001892:	d80a      	bhi.n	80018aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001894:	2200      	movs	r2, #0
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800189c:	f000 f92d 	bl	8001afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a0:	4a06      	ldr	r2, [pc, #24]	; (80018bc <HAL_InitTick+0x5c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
 80018a8:	e000      	b.n	80018ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000004 	.word	0x20000004
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	20000008 	.word	0x20000008

080018c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_IncTick+0x20>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <HAL_IncTick+0x24>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4413      	add	r3, r2
 80018d0:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_IncTick+0x24>)
 80018d2:	6013      	str	r3, [r2, #0]
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	2000000c 	.word	0x2000000c
 80018e4:	200002b8 	.word	0x200002b8

080018e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <HAL_GetTick+0x14>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	200002b8 	.word	0x200002b8

08001900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff ffee 	bl	80018e8 <HAL_GetTick>
 800190c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001918:	d005      	beq.n	8001926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_Delay+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4413      	add	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001926:	bf00      	nop
 8001928:	f7ff ffde 	bl	80018e8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d8f7      	bhi.n	8001928 <HAL_Delay+0x28>
  {
  }
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2000000c 	.word	0x2000000c

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800196c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4907      	ldr	r1, [pc, #28]	; (80019e0 <__NVIC_EnableIRQ+0x38>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
         );
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab0:	d301      	bcc.n	8001ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e00f      	b.n	8001ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <SysTick_Config+0x40>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001abe:	210f      	movs	r1, #15
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ac4:	f7ff ff8e 	bl	80019e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <SysTick_Config+0x40>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ace:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <SysTick_Config+0x40>)
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	e000e010 	.word	0xe000e010

08001ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff ff29 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b086      	sub	sp, #24
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b0c:	f7ff ff3e 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	68b9      	ldr	r1, [r7, #8]
 8001b16:	6978      	ldr	r0, [r7, #20]
 8001b18:	f7ff ff8e 	bl	8001a38 <NVIC_EncodePriority>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b22:	4611      	mov	r1, r2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff5d 	bl	80019e4 <__NVIC_SetPriority>
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff31 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff ffa2 	bl	8001aa0 <SysTick_Config>
 8001b5c:	4603      	mov	r3, r0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	e16b      	b.n	8001e5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b84:	2201      	movs	r2, #1
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	697a      	ldr	r2, [r7, #20]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 815a 	bne.w	8001e56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_GPIO_Init+0x5a>
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d007      	beq.n	8001bc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb6:	2b11      	cmp	r3, #17
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b12      	cmp	r3, #18
 8001bc0:	d130      	bne.n	8001c24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 0201 	and.w	r2, r3, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0xfc>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2b12      	cmp	r3, #18
 8001c62:	d123      	bne.n	8001cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	08da      	lsrs	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3208      	adds	r2, #8
 8001c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0203 	and.w	r2, r3, #3
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80b4 	beq.w	8001e56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_GPIO_Init+0x308>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	4a5e      	ldr	r2, [pc, #376]	; (8001e70 <HAL_GPIO_Init+0x308>)
 8001cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfe:	4b5c      	ldr	r3, [pc, #368]	; (8001e70 <HAL_GPIO_Init+0x308>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d0a:	4a5a      	ldr	r2, [pc, #360]	; (8001e74 <HAL_GPIO_Init+0x30c>)
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	089b      	lsrs	r3, r3, #2
 8001d10:	3302      	adds	r3, #2
 8001d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	220f      	movs	r2, #15
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a51      	ldr	r2, [pc, #324]	; (8001e78 <HAL_GPIO_Init+0x310>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02b      	beq.n	8001d8e <HAL_GPIO_Init+0x226>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a50      	ldr	r2, [pc, #320]	; (8001e7c <HAL_GPIO_Init+0x314>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d025      	beq.n	8001d8a <HAL_GPIO_Init+0x222>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a4f      	ldr	r2, [pc, #316]	; (8001e80 <HAL_GPIO_Init+0x318>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01f      	beq.n	8001d86 <HAL_GPIO_Init+0x21e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a4e      	ldr	r2, [pc, #312]	; (8001e84 <HAL_GPIO_Init+0x31c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d019      	beq.n	8001d82 <HAL_GPIO_Init+0x21a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4d      	ldr	r2, [pc, #308]	; (8001e88 <HAL_GPIO_Init+0x320>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d013      	beq.n	8001d7e <HAL_GPIO_Init+0x216>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4c      	ldr	r2, [pc, #304]	; (8001e8c <HAL_GPIO_Init+0x324>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00d      	beq.n	8001d7a <HAL_GPIO_Init+0x212>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <HAL_GPIO_Init+0x328>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <HAL_GPIO_Init+0x20e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4a      	ldr	r2, [pc, #296]	; (8001e94 <HAL_GPIO_Init+0x32c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d101      	bne.n	8001d72 <HAL_GPIO_Init+0x20a>
 8001d6e:	2307      	movs	r3, #7
 8001d70:	e00e      	b.n	8001d90 <HAL_GPIO_Init+0x228>
 8001d72:	2308      	movs	r3, #8
 8001d74:	e00c      	b.n	8001d90 <HAL_GPIO_Init+0x228>
 8001d76:	2306      	movs	r3, #6
 8001d78:	e00a      	b.n	8001d90 <HAL_GPIO_Init+0x228>
 8001d7a:	2305      	movs	r3, #5
 8001d7c:	e008      	b.n	8001d90 <HAL_GPIO_Init+0x228>
 8001d7e:	2304      	movs	r3, #4
 8001d80:	e006      	b.n	8001d90 <HAL_GPIO_Init+0x228>
 8001d82:	2303      	movs	r3, #3
 8001d84:	e004      	b.n	8001d90 <HAL_GPIO_Init+0x228>
 8001d86:	2302      	movs	r3, #2
 8001d88:	e002      	b.n	8001d90 <HAL_GPIO_Init+0x228>
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_GPIO_Init+0x228>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	f002 0203 	and.w	r2, r2, #3
 8001d96:	0092      	lsls	r2, r2, #2
 8001d98:	4093      	lsls	r3, r2
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da0:	4934      	ldr	r1, [pc, #208]	; (8001e74 <HAL_GPIO_Init+0x30c>)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dae:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dd2:	4a31      	ldr	r2, [pc, #196]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4013      	ands	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e02:	4b25      	ldr	r3, [pc, #148]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e26:	4a1c      	ldr	r2, [pc, #112]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e50:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <HAL_GPIO_Init+0x330>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	2b0f      	cmp	r3, #15
 8001e60:	f67f ae90 	bls.w	8001b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e64:	bf00      	nop
 8001e66:	3724      	adds	r7, #36	; 0x24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40020800 	.word	0x40020800
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40021400 	.word	0x40021400
 8001e90:	40021800 	.word	0x40021800
 8001e94:	40021c00 	.word	0x40021c00
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e25b      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d075      	beq.n	8001fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eee:	4ba3      	ldr	r3, [pc, #652]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d00c      	beq.n	8001f14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001efa:	4ba0      	ldr	r3, [pc, #640]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d112      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f06:	4b9d      	ldr	r3, [pc, #628]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f12:	d10b      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	4b99      	ldr	r3, [pc, #612]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d05b      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x108>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d157      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e236      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x74>
 8001f36:	4b91      	ldr	r3, [pc, #580]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a90      	ldr	r2, [pc, #576]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	e01d      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f4c:	d10c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x98>
 8001f4e:	4b8b      	ldr	r3, [pc, #556]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a8a      	ldr	r2, [pc, #552]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b88      	ldr	r3, [pc, #544]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a87      	ldr	r2, [pc, #540]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	e00b      	b.n	8001f80 <HAL_RCC_OscConfig+0xb0>
 8001f68:	4b84      	ldr	r3, [pc, #528]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a83      	ldr	r2, [pc, #524]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f72:	6013      	str	r3, [r2, #0]
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a80      	ldr	r2, [pc, #512]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d013      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f88:	f7ff fcae 	bl	80018e8 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f90:	f7ff fcaa 	bl	80018e8 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1fb      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa2:	4b76      	ldr	r3, [pc, #472]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0xc0>
 8001fae:	e014      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fc9a 	bl	80018e8 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff fc96 	bl	80018e8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b64      	cmp	r3, #100	; 0x64
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e1e7      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fca:	4b6c      	ldr	r3, [pc, #432]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0xe8>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d063      	beq.n	80020ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fe6:	4b65      	ldr	r3, [pc, #404]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00b      	beq.n	800200a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ff2:	4b62      	ldr	r3, [pc, #392]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffa:	2b08      	cmp	r3, #8
 8001ffc:	d11c      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b5f      	ldr	r3, [pc, #380]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b5c      	ldr	r3, [pc, #368]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d005      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d001      	beq.n	8002022 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e1bb      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002022:	4b56      	ldr	r3, [pc, #344]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4952      	ldr	r1, [pc, #328]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002032:	4313      	orrs	r3, r2
 8002034:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e03a      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d020      	beq.n	8002082 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_OscConfig+0x2b0>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff fc4f 	bl	80018e8 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff fc4b 	bl	80018e8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e19c      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002060:	4b46      	ldr	r3, [pc, #280]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4940      	ldr	r1, [pc, #256]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]
 8002080:	e015      	b.n	80020ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002082:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_RCC_OscConfig+0x2b0>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff fc2e 	bl	80018e8 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7ff fc2a 	bl	80018e8 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e17b      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a2:	4b36      	ldr	r3, [pc, #216]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d030      	beq.n	800211c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d016      	beq.n	80020f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c2:	4b30      	ldr	r3, [pc, #192]	; (8002184 <HAL_RCC_OscConfig+0x2b4>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff fc0e 	bl	80018e8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d0:	f7ff fc0a 	bl	80018e8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e15b      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x200>
 80020ee:	e015      	b.n	800211c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_RCC_OscConfig+0x2b4>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f6:	f7ff fbf7 	bl	80018e8 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff fbf3 	bl	80018e8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e144      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0304 	and.w	r3, r3, #4
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80a0 	beq.w	800226a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	2300      	movs	r3, #0
 800212c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10f      	bne.n	800215a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	4b0f      	ldr	r3, [pc, #60]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 8002144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002148:	6413      	str	r3, [r2, #64]	; 0x40
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_RCC_OscConfig+0x2ac>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002152:	60bb      	str	r3, [r7, #8]
 8002154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002156:	2301      	movs	r3, #1
 8002158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_RCC_OscConfig+0x2b8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d121      	bne.n	80021aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <HAL_RCC_OscConfig+0x2b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <HAL_RCC_OscConfig+0x2b8>)
 800216c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002172:	f7ff fbb9 	bl	80018e8 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	e011      	b.n	800219e <HAL_RCC_OscConfig+0x2ce>
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	42470000 	.word	0x42470000
 8002184:	42470e80 	.word	0x42470e80
 8002188:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7ff fbac 	bl	80018e8 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0fd      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b81      	ldr	r3, [pc, #516]	; (80023a4 <HAL_RCC_OscConfig+0x4d4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d106      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
 80021b2:	4b7d      	ldr	r3, [pc, #500]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	4a7c      	ldr	r2, [pc, #496]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6713      	str	r3, [r2, #112]	; 0x70
 80021be:	e01c      	b.n	80021fa <HAL_RCC_OscConfig+0x32a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	d10c      	bne.n	80021e2 <HAL_RCC_OscConfig+0x312>
 80021c8:	4b77      	ldr	r3, [pc, #476]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021cc:	4a76      	ldr	r2, [pc, #472]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6713      	str	r3, [r2, #112]	; 0x70
 80021d4:	4b74      	ldr	r3, [pc, #464]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	4a73      	ldr	r2, [pc, #460]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021da:	f043 0301 	orr.w	r3, r3, #1
 80021de:	6713      	str	r3, [r2, #112]	; 0x70
 80021e0:	e00b      	b.n	80021fa <HAL_RCC_OscConfig+0x32a>
 80021e2:	4b71      	ldr	r3, [pc, #452]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a70      	ldr	r2, [pc, #448]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	4b6e      	ldr	r3, [pc, #440]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f2:	4a6d      	ldr	r2, [pc, #436]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80021f4:	f023 0304 	bic.w	r3, r3, #4
 80021f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d015      	beq.n	800222e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff fb71 	bl	80018e8 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002208:	e00a      	b.n	8002220 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220a:	f7ff fb6d 	bl	80018e8 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	; 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0bc      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002220:	4b61      	ldr	r3, [pc, #388]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ee      	beq.n	800220a <HAL_RCC_OscConfig+0x33a>
 800222c:	e014      	b.n	8002258 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7ff fb5b 	bl	80018e8 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff fb57 	bl	80018e8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0a6      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800224c:	4b56      	ldr	r3, [pc, #344]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1ee      	bne.n	8002236 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002258:	7dfb      	ldrb	r3, [r7, #23]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d105      	bne.n	800226a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800225e:	4b52      	ldr	r3, [pc, #328]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	4a51      	ldr	r2, [pc, #324]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 8002264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8092 	beq.w	8002398 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002274:	4b4c      	ldr	r3, [pc, #304]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f003 030c 	and.w	r3, r3, #12
 800227c:	2b08      	cmp	r3, #8
 800227e:	d05c      	beq.n	800233a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b02      	cmp	r3, #2
 8002286:	d141      	bne.n	800230c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002288:	4b48      	ldr	r3, [pc, #288]	; (80023ac <HAL_RCC_OscConfig+0x4dc>)
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228e:	f7ff fb2b 	bl	80018e8 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002296:	f7ff fb27 	bl	80018e8 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e078      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a8:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f0      	bne.n	8002296 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	019b      	lsls	r3, r3, #6
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	085b      	lsrs	r3, r3, #1
 80022cc:	3b01      	subs	r3, #1
 80022ce:	041b      	lsls	r3, r3, #16
 80022d0:	431a      	orrs	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	061b      	lsls	r3, r3, #24
 80022d8:	4933      	ldr	r1, [pc, #204]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022de:	4b33      	ldr	r3, [pc, #204]	; (80023ac <HAL_RCC_OscConfig+0x4dc>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e4:	f7ff fb00 	bl	80018e8 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ec:	f7ff fafc 	bl	80018e8 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04d      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x41c>
 800230a:	e045      	b.n	8002398 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x4dc>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7ff fae9 	bl	80018e8 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231a:	f7ff fae5 	bl	80018e8 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e036      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x44a>
 8002338:	e02e      	b.n	8002398 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e029      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002346:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_RCC_OscConfig+0x4d8>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	429a      	cmp	r2, r3
 8002358:	d11c      	bne.n	8002394 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d115      	bne.n	8002394 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800236e:	4013      	ands	r3, r2
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002374:	4293      	cmp	r3, r2
 8002376:	d10d      	bne.n	8002394 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d106      	bne.n	8002394 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40007000 	.word	0x40007000
 80023a8:	40023800 	.word	0x40023800
 80023ac:	42470060 	.word	0x42470060

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0cc      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b68      	ldr	r3, [pc, #416]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d90c      	bls.n	80023ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b65      	ldr	r3, [pc, #404]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a58      	ldr	r2, [pc, #352]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800240e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a52      	ldr	r2, [pc, #328]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d044      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d119      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d003      	beq.n	800246e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	4b3f      	ldr	r3, [pc, #252]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247e:	4b3b      	ldr	r3, [pc, #236]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e067      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b37      	ldr	r3, [pc, #220]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4934      	ldr	r1, [pc, #208]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7ff fa22 	bl	80018e8 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	e00a      	b.n	80024be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7ff fa1e 	bl	80018e8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e04f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 020c 	and.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1eb      	bne.n	80024a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d20c      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b22      	ldr	r3, [pc, #136]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f821 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800253a:	4601      	mov	r1, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	; (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	fa21 f303 	lsr.w	r3, r1, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff f982 	bl	8001860 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	080042c0 	.word	0x080042c0
 8002574:	20000004 	.word	0x20000004
 8002578:	20000008 	.word	0x20000008

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	2300      	movs	r3, #0
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002592:	4b63      	ldr	r3, [pc, #396]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b04      	cmp	r3, #4
 800259c:	d007      	beq.n	80025ae <HAL_RCC_GetSysClockFreq+0x32>
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d008      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x38>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 80b4 	bne.w	8002710 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80025aa:	60bb      	str	r3, [r7, #8]
       break;
 80025ac:	e0b3      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ae:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80025b0:	60bb      	str	r3, [r7, #8]
      break;
 80025b2:	e0b0      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b4:	4b5a      	ldr	r3, [pc, #360]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025be:	4b58      	ldr	r3, [pc, #352]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d04a      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ca:	4b55      	ldr	r3, [pc, #340]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	099b      	lsrs	r3, r3, #6
 80025d0:	f04f 0400 	mov.w	r4, #0
 80025d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	ea03 0501 	and.w	r5, r3, r1
 80025e0:	ea04 0602 	and.w	r6, r4, r2
 80025e4:	4629      	mov	r1, r5
 80025e6:	4632      	mov	r2, r6
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f04f 0400 	mov.w	r4, #0
 80025f0:	0154      	lsls	r4, r2, #5
 80025f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025f6:	014b      	lsls	r3, r1, #5
 80025f8:	4619      	mov	r1, r3
 80025fa:	4622      	mov	r2, r4
 80025fc:	1b49      	subs	r1, r1, r5
 80025fe:	eb62 0206 	sbc.w	r2, r2, r6
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	f04f 0400 	mov.w	r4, #0
 800260a:	0194      	lsls	r4, r2, #6
 800260c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002610:	018b      	lsls	r3, r1, #6
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	eb64 0402 	sbc.w	r4, r4, r2
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	00e2      	lsls	r2, r4, #3
 8002622:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002626:	00d9      	lsls	r1, r3, #3
 8002628:	460b      	mov	r3, r1
 800262a:	4614      	mov	r4, r2
 800262c:	195b      	adds	r3, r3, r5
 800262e:	eb44 0406 	adc.w	r4, r4, r6
 8002632:	f04f 0100 	mov.w	r1, #0
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	0262      	lsls	r2, r4, #9
 800263c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002640:	0259      	lsls	r1, r3, #9
 8002642:	460b      	mov	r3, r1
 8002644:	4614      	mov	r4, r2
 8002646:	4618      	mov	r0, r3
 8002648:	4621      	mov	r1, r4
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f04f 0400 	mov.w	r4, #0
 8002650:	461a      	mov	r2, r3
 8002652:	4623      	mov	r3, r4
 8002654:	f7fd fe14 	bl	8000280 <__aeabi_uldivmod>
 8002658:	4603      	mov	r3, r0
 800265a:	460c      	mov	r4, r1
 800265c:	60fb      	str	r3, [r7, #12]
 800265e:	e049      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002660:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	099b      	lsrs	r3, r3, #6
 8002666:	f04f 0400 	mov.w	r4, #0
 800266a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	ea03 0501 	and.w	r5, r3, r1
 8002676:	ea04 0602 	and.w	r6, r4, r2
 800267a:	4629      	mov	r1, r5
 800267c:	4632      	mov	r2, r6
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	f04f 0400 	mov.w	r4, #0
 8002686:	0154      	lsls	r4, r2, #5
 8002688:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800268c:	014b      	lsls	r3, r1, #5
 800268e:	4619      	mov	r1, r3
 8002690:	4622      	mov	r2, r4
 8002692:	1b49      	subs	r1, r1, r5
 8002694:	eb62 0206 	sbc.w	r2, r2, r6
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	f04f 0400 	mov.w	r4, #0
 80026a0:	0194      	lsls	r4, r2, #6
 80026a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026a6:	018b      	lsls	r3, r1, #6
 80026a8:	1a5b      	subs	r3, r3, r1
 80026aa:	eb64 0402 	sbc.w	r4, r4, r2
 80026ae:	f04f 0100 	mov.w	r1, #0
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	00e2      	lsls	r2, r4, #3
 80026b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026bc:	00d9      	lsls	r1, r3, #3
 80026be:	460b      	mov	r3, r1
 80026c0:	4614      	mov	r4, r2
 80026c2:	195b      	adds	r3, r3, r5
 80026c4:	eb44 0406 	adc.w	r4, r4, r6
 80026c8:	f04f 0100 	mov.w	r1, #0
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	02a2      	lsls	r2, r4, #10
 80026d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80026d6:	0299      	lsls	r1, r3, #10
 80026d8:	460b      	mov	r3, r1
 80026da:	4614      	mov	r4, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	4621      	mov	r1, r4
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f04f 0400 	mov.w	r4, #0
 80026e6:	461a      	mov	r2, r3
 80026e8:	4623      	mov	r3, r4
 80026ea:	f7fd fdc9 	bl	8000280 <__aeabi_uldivmod>
 80026ee:	4603      	mov	r3, r0
 80026f0:	460c      	mov	r4, r1
 80026f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	60bb      	str	r3, [r7, #8]
      break;
 800270e:	e002      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002712:	60bb      	str	r3, [r7, #8]
      break;
 8002714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002716:	68bb      	ldr	r3, [r7, #8]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002720:	40023800 	.word	0x40023800
 8002724:	00f42400 	.word	0x00f42400
 8002728:	007a1200 	.word	0x007a1200

0800272c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000004 	.word	0x20000004

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002748:	f7ff fff0 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274c:	4601      	mov	r1, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0a9b      	lsrs	r3, r3, #10
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4a03      	ldr	r2, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 800275a:	5cd3      	ldrb	r3, [r2, r3]
 800275c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40023800 	.word	0x40023800
 8002768:	080042d0 	.word	0x080042d0

0800276c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002770:	f7ff ffdc 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002774:	4601      	mov	r1, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	0b5b      	lsrs	r3, r3, #13
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40023800 	.word	0x40023800
 8002790:	080042d0 	.word	0x080042d0

08002794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e056      	b.n	8002854 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7fe fee9 	bl	8001598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2202      	movs	r2, #2
 80027ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	ea42 0103 	orr.w	r1, r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	0c1b      	lsrs	r3, r3, #16
 8002824:	f003 0104 	and.w	r1, r3, #4
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69da      	ldr	r2, [r3, #28]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002842:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	4613      	mov	r3, r2
 800286a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_SPI_Transmit+0x22>
 800287a:	2302      	movs	r3, #2
 800287c:	e11e      	b.n	8002abc <HAL_SPI_Transmit+0x260>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002886:	f7ff f82f 	bl	80018e8 <HAL_GetTick>
 800288a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800288c:	88fb      	ldrh	r3, [r7, #6]
 800288e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b01      	cmp	r3, #1
 800289a:	d002      	beq.n	80028a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800289c:	2302      	movs	r3, #2
 800289e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028a0:	e103      	b.n	8002aaa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_SPI_Transmit+0x52>
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80028b2:	e0fa      	b.n	8002aaa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2203      	movs	r2, #3
 80028b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	88fa      	ldrh	r2, [r7, #6]
 80028cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	88fa      	ldrh	r2, [r7, #6]
 80028d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028fa:	d107      	bne.n	800290c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800290a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	d007      	beq.n	800292a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002932:	d14b      	bne.n	80029cc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_SPI_Transmit+0xe6>
 800293c:	8afb      	ldrh	r3, [r7, #22]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d13e      	bne.n	80029c0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	881a      	ldrh	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	1c9a      	adds	r2, r3, #2
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002966:	e02b      	b.n	80029c0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	d112      	bne.n	800299c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	881a      	ldrh	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	1c9a      	adds	r2, r3, #2
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	86da      	strh	r2, [r3, #54]	; 0x36
 800299a:	e011      	b.n	80029c0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800299c:	f7fe ffa4 	bl	80018e8 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d803      	bhi.n	80029b4 <HAL_SPI_Transmit+0x158>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b2:	d102      	bne.n	80029ba <HAL_SPI_Transmit+0x15e>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d102      	bne.n	80029c0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029be:	e074      	b.n	8002aaa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d1ce      	bne.n	8002968 <HAL_SPI_Transmit+0x10c>
 80029ca:	e04c      	b.n	8002a66 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d002      	beq.n	80029da <HAL_SPI_Transmit+0x17e>
 80029d4:	8afb      	ldrh	r3, [r7, #22]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d140      	bne.n	8002a5c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	330c      	adds	r3, #12
 80029e4:	7812      	ldrb	r2, [r2, #0]
 80029e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002a00:	e02c      	b.n	8002a5c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d113      	bne.n	8002a38 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	7812      	ldrb	r2, [r2, #0]
 8002a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	1c5a      	adds	r2, r3, #1
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	86da      	strh	r2, [r3, #54]	; 0x36
 8002a36:	e011      	b.n	8002a5c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a38:	f7fe ff56 	bl	80018e8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d803      	bhi.n	8002a50 <HAL_SPI_Transmit+0x1f4>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a4e:	d102      	bne.n	8002a56 <HAL_SPI_Transmit+0x1fa>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002a5a:	e026      	b.n	8002aaa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1cd      	bne.n	8002a02 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	6839      	ldr	r1, [r7, #0]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f894 	bl	8002b98 <SPI_EndRxTxTransaction>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d10a      	bne.n	8002a9a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	77fb      	strb	r3, [r7, #31]
 8002aa6:	e000      	b.n	8002aaa <HAL_SPI_Transmit+0x24e>
  }

error:
 8002aa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002aba:	7ffb      	ldrb	r3, [r7, #31]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b084      	sub	sp, #16
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ad4:	e04c      	b.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002adc:	d048      	beq.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002ade:	f7fe ff03 	bl	80018e8 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d902      	bls.n	8002af4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d13d      	bne.n	8002b70 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b0c:	d111      	bne.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b16:	d004      	beq.n	8002b22 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b20:	d107      	bne.n	8002b32 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b3a:	d10f      	bne.n	8002b5c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e00f      	b.n	8002b90 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	461a      	mov	r2, r3
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d1a3      	bne.n	8002ad6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <SPI_EndRxTxTransaction+0x7c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <SPI_EndRxTxTransaction+0x80>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0d5b      	lsrs	r3, r3, #21
 8002bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bc2:	d112      	bne.n	8002bea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2180      	movs	r1, #128	; 0x80
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f7ff ff78 	bl	8002ac4 <SPI_WaitFlagStateUntilTimeout>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d016      	beq.n	8002c08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	f043 0220 	orr.w	r2, r3, #32
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e00f      	b.n	8002c0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d0f2      	beq.n	8002bea <SPI_EndRxTxTransaction+0x52>
 8002c04:	e000      	b.n	8002c08 <SPI_EndRxTxTransaction+0x70>
        break;
 8002c06:	bf00      	nop
  }

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000004 	.word	0x20000004
 8002c18:	165e9f81 	.word	0x165e9f81

08002c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e03f      	b.n	8002cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fe fcf0 	bl	8001628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	; 0x24
 8002c4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f829 	bl	8002cb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002cfa:	f023 030c 	bic.w	r3, r3, #12
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	68f9      	ldr	r1, [r7, #12]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	699a      	ldr	r2, [r3, #24]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d26:	f040 818b 	bne.w	8003040 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4ac1      	ldr	r2, [pc, #772]	; (8003034 <UART_SetConfig+0x37c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d005      	beq.n	8002d40 <UART_SetConfig+0x88>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4abf      	ldr	r2, [pc, #764]	; (8003038 <UART_SetConfig+0x380>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	f040 80bd 	bne.w	8002eba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d40:	f7ff fd14 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 8002d44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	461d      	mov	r5, r3
 8002d4a:	f04f 0600 	mov.w	r6, #0
 8002d4e:	46a8      	mov	r8, r5
 8002d50:	46b1      	mov	r9, r6
 8002d52:	eb18 0308 	adds.w	r3, r8, r8
 8002d56:	eb49 0409 	adc.w	r4, r9, r9
 8002d5a:	4698      	mov	r8, r3
 8002d5c:	46a1      	mov	r9, r4
 8002d5e:	eb18 0805 	adds.w	r8, r8, r5
 8002d62:	eb49 0906 	adc.w	r9, r9, r6
 8002d66:	f04f 0100 	mov.w	r1, #0
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d7a:	4688      	mov	r8, r1
 8002d7c:	4691      	mov	r9, r2
 8002d7e:	eb18 0005 	adds.w	r0, r8, r5
 8002d82:	eb49 0106 	adc.w	r1, r9, r6
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	461d      	mov	r5, r3
 8002d8c:	f04f 0600 	mov.w	r6, #0
 8002d90:	196b      	adds	r3, r5, r5
 8002d92:	eb46 0406 	adc.w	r4, r6, r6
 8002d96:	461a      	mov	r2, r3
 8002d98:	4623      	mov	r3, r4
 8002d9a:	f7fd fa71 	bl	8000280 <__aeabi_uldivmod>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	460c      	mov	r4, r1
 8002da2:	461a      	mov	r2, r3
 8002da4:	4ba5      	ldr	r3, [pc, #660]	; (800303c <UART_SetConfig+0x384>)
 8002da6:	fba3 2302 	umull	r2, r3, r3, r2
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	461d      	mov	r5, r3
 8002db4:	f04f 0600 	mov.w	r6, #0
 8002db8:	46a9      	mov	r9, r5
 8002dba:	46b2      	mov	sl, r6
 8002dbc:	eb19 0309 	adds.w	r3, r9, r9
 8002dc0:	eb4a 040a 	adc.w	r4, sl, sl
 8002dc4:	4699      	mov	r9, r3
 8002dc6:	46a2      	mov	sl, r4
 8002dc8:	eb19 0905 	adds.w	r9, r9, r5
 8002dcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002dd0:	f04f 0100 	mov.w	r1, #0
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ddc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002de0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002de4:	4689      	mov	r9, r1
 8002de6:	4692      	mov	sl, r2
 8002de8:	eb19 0005 	adds.w	r0, r9, r5
 8002dec:	eb4a 0106 	adc.w	r1, sl, r6
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	461d      	mov	r5, r3
 8002df6:	f04f 0600 	mov.w	r6, #0
 8002dfa:	196b      	adds	r3, r5, r5
 8002dfc:	eb46 0406 	adc.w	r4, r6, r6
 8002e00:	461a      	mov	r2, r3
 8002e02:	4623      	mov	r3, r4
 8002e04:	f7fd fa3c 	bl	8000280 <__aeabi_uldivmod>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b8b      	ldr	r3, [pc, #556]	; (800303c <UART_SetConfig+0x384>)
 8002e10:	fba3 1302 	umull	r1, r3, r3, r2
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	2164      	movs	r1, #100	; 0x64
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	3332      	adds	r3, #50	; 0x32
 8002e22:	4a86      	ldr	r2, [pc, #536]	; (800303c <UART_SetConfig+0x384>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e30:	4498      	add	r8, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	461d      	mov	r5, r3
 8002e36:	f04f 0600 	mov.w	r6, #0
 8002e3a:	46a9      	mov	r9, r5
 8002e3c:	46b2      	mov	sl, r6
 8002e3e:	eb19 0309 	adds.w	r3, r9, r9
 8002e42:	eb4a 040a 	adc.w	r4, sl, sl
 8002e46:	4699      	mov	r9, r3
 8002e48:	46a2      	mov	sl, r4
 8002e4a:	eb19 0905 	adds.w	r9, r9, r5
 8002e4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002e52:	f04f 0100 	mov.w	r1, #0
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e66:	4689      	mov	r9, r1
 8002e68:	4692      	mov	sl, r2
 8002e6a:	eb19 0005 	adds.w	r0, r9, r5
 8002e6e:	eb4a 0106 	adc.w	r1, sl, r6
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	461d      	mov	r5, r3
 8002e78:	f04f 0600 	mov.w	r6, #0
 8002e7c:	196b      	adds	r3, r5, r5
 8002e7e:	eb46 0406 	adc.w	r4, r6, r6
 8002e82:	461a      	mov	r2, r3
 8002e84:	4623      	mov	r3, r4
 8002e86:	f7fd f9fb 	bl	8000280 <__aeabi_uldivmod>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	460c      	mov	r4, r1
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4b6a      	ldr	r3, [pc, #424]	; (800303c <UART_SetConfig+0x384>)
 8002e92:	fba3 1302 	umull	r1, r3, r3, r2
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2164      	movs	r1, #100	; 0x64
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	3332      	adds	r3, #50	; 0x32
 8002ea4:	4a65      	ldr	r2, [pc, #404]	; (800303c <UART_SetConfig+0x384>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	f003 0207 	and.w	r2, r3, #7
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4442      	add	r2, r8
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	e26f      	b.n	800339a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eba:	f7ff fc43 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8002ebe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	461d      	mov	r5, r3
 8002ec4:	f04f 0600 	mov.w	r6, #0
 8002ec8:	46a8      	mov	r8, r5
 8002eca:	46b1      	mov	r9, r6
 8002ecc:	eb18 0308 	adds.w	r3, r8, r8
 8002ed0:	eb49 0409 	adc.w	r4, r9, r9
 8002ed4:	4698      	mov	r8, r3
 8002ed6:	46a1      	mov	r9, r4
 8002ed8:	eb18 0805 	adds.w	r8, r8, r5
 8002edc:	eb49 0906 	adc.w	r9, r9, r6
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002eec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ef0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ef4:	4688      	mov	r8, r1
 8002ef6:	4691      	mov	r9, r2
 8002ef8:	eb18 0005 	adds.w	r0, r8, r5
 8002efc:	eb49 0106 	adc.w	r1, r9, r6
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	461d      	mov	r5, r3
 8002f06:	f04f 0600 	mov.w	r6, #0
 8002f0a:	196b      	adds	r3, r5, r5
 8002f0c:	eb46 0406 	adc.w	r4, r6, r6
 8002f10:	461a      	mov	r2, r3
 8002f12:	4623      	mov	r3, r4
 8002f14:	f7fd f9b4 	bl	8000280 <__aeabi_uldivmod>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4b47      	ldr	r3, [pc, #284]	; (800303c <UART_SetConfig+0x384>)
 8002f20:	fba3 2302 	umull	r2, r3, r3, r2
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	461d      	mov	r5, r3
 8002f2e:	f04f 0600 	mov.w	r6, #0
 8002f32:	46a9      	mov	r9, r5
 8002f34:	46b2      	mov	sl, r6
 8002f36:	eb19 0309 	adds.w	r3, r9, r9
 8002f3a:	eb4a 040a 	adc.w	r4, sl, sl
 8002f3e:	4699      	mov	r9, r3
 8002f40:	46a2      	mov	sl, r4
 8002f42:	eb19 0905 	adds.w	r9, r9, r5
 8002f46:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f5e:	4689      	mov	r9, r1
 8002f60:	4692      	mov	sl, r2
 8002f62:	eb19 0005 	adds.w	r0, r9, r5
 8002f66:	eb4a 0106 	adc.w	r1, sl, r6
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	461d      	mov	r5, r3
 8002f70:	f04f 0600 	mov.w	r6, #0
 8002f74:	196b      	adds	r3, r5, r5
 8002f76:	eb46 0406 	adc.w	r4, r6, r6
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4623      	mov	r3, r4
 8002f7e:	f7fd f97f 	bl	8000280 <__aeabi_uldivmod>
 8002f82:	4603      	mov	r3, r0
 8002f84:	460c      	mov	r4, r1
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b2c      	ldr	r3, [pc, #176]	; (800303c <UART_SetConfig+0x384>)
 8002f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8e:	095b      	lsrs	r3, r3, #5
 8002f90:	2164      	movs	r1, #100	; 0x64
 8002f92:	fb01 f303 	mul.w	r3, r1, r3
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	3332      	adds	r3, #50	; 0x32
 8002f9c:	4a27      	ldr	r2, [pc, #156]	; (800303c <UART_SetConfig+0x384>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	095b      	lsrs	r3, r3, #5
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002faa:	4498      	add	r8, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	461d      	mov	r5, r3
 8002fb0:	f04f 0600 	mov.w	r6, #0
 8002fb4:	46a9      	mov	r9, r5
 8002fb6:	46b2      	mov	sl, r6
 8002fb8:	eb19 0309 	adds.w	r3, r9, r9
 8002fbc:	eb4a 040a 	adc.w	r4, sl, sl
 8002fc0:	4699      	mov	r9, r3
 8002fc2:	46a2      	mov	sl, r4
 8002fc4:	eb19 0905 	adds.w	r9, r9, r5
 8002fc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002fcc:	f04f 0100 	mov.w	r1, #0
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002fdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fe0:	4689      	mov	r9, r1
 8002fe2:	4692      	mov	sl, r2
 8002fe4:	eb19 0005 	adds.w	r0, r9, r5
 8002fe8:	eb4a 0106 	adc.w	r1, sl, r6
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	461d      	mov	r5, r3
 8002ff2:	f04f 0600 	mov.w	r6, #0
 8002ff6:	196b      	adds	r3, r5, r5
 8002ff8:	eb46 0406 	adc.w	r4, r6, r6
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4623      	mov	r3, r4
 8003000:	f7fd f93e 	bl	8000280 <__aeabi_uldivmod>
 8003004:	4603      	mov	r3, r0
 8003006:	460c      	mov	r4, r1
 8003008:	461a      	mov	r2, r3
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <UART_SetConfig+0x384>)
 800300c:	fba3 1302 	umull	r1, r3, r3, r2
 8003010:	095b      	lsrs	r3, r3, #5
 8003012:	2164      	movs	r1, #100	; 0x64
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	3332      	adds	r3, #50	; 0x32
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <UART_SetConfig+0x384>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	095b      	lsrs	r3, r3, #5
 8003026:	f003 0207 	and.w	r2, r3, #7
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4442      	add	r2, r8
 8003030:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003032:	e1b2      	b.n	800339a <UART_SetConfig+0x6e2>
 8003034:	40011000 	.word	0x40011000
 8003038:	40011400 	.word	0x40011400
 800303c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4ad7      	ldr	r2, [pc, #860]	; (80033a4 <UART_SetConfig+0x6ec>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d005      	beq.n	8003056 <UART_SetConfig+0x39e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4ad6      	ldr	r2, [pc, #856]	; (80033a8 <UART_SetConfig+0x6f0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	f040 80d1 	bne.w	80031f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003056:	f7ff fb89 	bl	800276c <HAL_RCC_GetPCLK2Freq>
 800305a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	469a      	mov	sl, r3
 8003060:	f04f 0b00 	mov.w	fp, #0
 8003064:	46d0      	mov	r8, sl
 8003066:	46d9      	mov	r9, fp
 8003068:	eb18 0308 	adds.w	r3, r8, r8
 800306c:	eb49 0409 	adc.w	r4, r9, r9
 8003070:	4698      	mov	r8, r3
 8003072:	46a1      	mov	r9, r4
 8003074:	eb18 080a 	adds.w	r8, r8, sl
 8003078:	eb49 090b 	adc.w	r9, r9, fp
 800307c:	f04f 0100 	mov.w	r1, #0
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003088:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800308c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003090:	4688      	mov	r8, r1
 8003092:	4691      	mov	r9, r2
 8003094:	eb1a 0508 	adds.w	r5, sl, r8
 8003098:	eb4b 0609 	adc.w	r6, fp, r9
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4619      	mov	r1, r3
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	f04f 0400 	mov.w	r4, #0
 80030ae:	0094      	lsls	r4, r2, #2
 80030b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80030b4:	008b      	lsls	r3, r1, #2
 80030b6:	461a      	mov	r2, r3
 80030b8:	4623      	mov	r3, r4
 80030ba:	4628      	mov	r0, r5
 80030bc:	4631      	mov	r1, r6
 80030be:	f7fd f8df 	bl	8000280 <__aeabi_uldivmod>
 80030c2:	4603      	mov	r3, r0
 80030c4:	460c      	mov	r4, r1
 80030c6:	461a      	mov	r2, r3
 80030c8:	4bb8      	ldr	r3, [pc, #736]	; (80033ac <UART_SetConfig+0x6f4>)
 80030ca:	fba3 2302 	umull	r2, r3, r3, r2
 80030ce:	095b      	lsrs	r3, r3, #5
 80030d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	469b      	mov	fp, r3
 80030d8:	f04f 0c00 	mov.w	ip, #0
 80030dc:	46d9      	mov	r9, fp
 80030de:	46e2      	mov	sl, ip
 80030e0:	eb19 0309 	adds.w	r3, r9, r9
 80030e4:	eb4a 040a 	adc.w	r4, sl, sl
 80030e8:	4699      	mov	r9, r3
 80030ea:	46a2      	mov	sl, r4
 80030ec:	eb19 090b 	adds.w	r9, r9, fp
 80030f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80030f4:	f04f 0100 	mov.w	r1, #0
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003100:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003104:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003108:	4689      	mov	r9, r1
 800310a:	4692      	mov	sl, r2
 800310c:	eb1b 0509 	adds.w	r5, fp, r9
 8003110:	eb4c 060a 	adc.w	r6, ip, sl
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4619      	mov	r1, r3
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f04f 0400 	mov.w	r4, #0
 8003126:	0094      	lsls	r4, r2, #2
 8003128:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800312c:	008b      	lsls	r3, r1, #2
 800312e:	461a      	mov	r2, r3
 8003130:	4623      	mov	r3, r4
 8003132:	4628      	mov	r0, r5
 8003134:	4631      	mov	r1, r6
 8003136:	f7fd f8a3 	bl	8000280 <__aeabi_uldivmod>
 800313a:	4603      	mov	r3, r0
 800313c:	460c      	mov	r4, r1
 800313e:	461a      	mov	r2, r3
 8003140:	4b9a      	ldr	r3, [pc, #616]	; (80033ac <UART_SetConfig+0x6f4>)
 8003142:	fba3 1302 	umull	r1, r3, r3, r2
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2164      	movs	r1, #100	; 0x64
 800314a:	fb01 f303 	mul.w	r3, r1, r3
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	3332      	adds	r3, #50	; 0x32
 8003154:	4a95      	ldr	r2, [pc, #596]	; (80033ac <UART_SetConfig+0x6f4>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003160:	4498      	add	r8, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	469b      	mov	fp, r3
 8003166:	f04f 0c00 	mov.w	ip, #0
 800316a:	46d9      	mov	r9, fp
 800316c:	46e2      	mov	sl, ip
 800316e:	eb19 0309 	adds.w	r3, r9, r9
 8003172:	eb4a 040a 	adc.w	r4, sl, sl
 8003176:	4699      	mov	r9, r3
 8003178:	46a2      	mov	sl, r4
 800317a:	eb19 090b 	adds.w	r9, r9, fp
 800317e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003182:	f04f 0100 	mov.w	r1, #0
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800318e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003192:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003196:	4689      	mov	r9, r1
 8003198:	4692      	mov	sl, r2
 800319a:	eb1b 0509 	adds.w	r5, fp, r9
 800319e:	eb4c 060a 	adc.w	r6, ip, sl
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4619      	mov	r1, r3
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	f04f 0400 	mov.w	r4, #0
 80031b4:	0094      	lsls	r4, r2, #2
 80031b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80031ba:	008b      	lsls	r3, r1, #2
 80031bc:	461a      	mov	r2, r3
 80031be:	4623      	mov	r3, r4
 80031c0:	4628      	mov	r0, r5
 80031c2:	4631      	mov	r1, r6
 80031c4:	f7fd f85c 	bl	8000280 <__aeabi_uldivmod>
 80031c8:	4603      	mov	r3, r0
 80031ca:	460c      	mov	r4, r1
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b77      	ldr	r3, [pc, #476]	; (80033ac <UART_SetConfig+0x6f4>)
 80031d0:	fba3 1302 	umull	r1, r3, r3, r2
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	2164      	movs	r1, #100	; 0x64
 80031d8:	fb01 f303 	mul.w	r3, r1, r3
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	3332      	adds	r3, #50	; 0x32
 80031e2:	4a72      	ldr	r2, [pc, #456]	; (80033ac <UART_SetConfig+0x6f4>)
 80031e4:	fba2 2303 	umull	r2, r3, r2, r3
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	f003 020f 	and.w	r2, r3, #15
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4442      	add	r2, r8
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	e0d0      	b.n	800339a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80031f8:	f7ff faa4 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 80031fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	469a      	mov	sl, r3
 8003202:	f04f 0b00 	mov.w	fp, #0
 8003206:	46d0      	mov	r8, sl
 8003208:	46d9      	mov	r9, fp
 800320a:	eb18 0308 	adds.w	r3, r8, r8
 800320e:	eb49 0409 	adc.w	r4, r9, r9
 8003212:	4698      	mov	r8, r3
 8003214:	46a1      	mov	r9, r4
 8003216:	eb18 080a 	adds.w	r8, r8, sl
 800321a:	eb49 090b 	adc.w	r9, r9, fp
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800322a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800322e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003232:	4688      	mov	r8, r1
 8003234:	4691      	mov	r9, r2
 8003236:	eb1a 0508 	adds.w	r5, sl, r8
 800323a:	eb4b 0609 	adc.w	r6, fp, r9
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	4619      	mov	r1, r3
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	f04f 0400 	mov.w	r4, #0
 8003250:	0094      	lsls	r4, r2, #2
 8003252:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003256:	008b      	lsls	r3, r1, #2
 8003258:	461a      	mov	r2, r3
 800325a:	4623      	mov	r3, r4
 800325c:	4628      	mov	r0, r5
 800325e:	4631      	mov	r1, r6
 8003260:	f7fd f80e 	bl	8000280 <__aeabi_uldivmod>
 8003264:	4603      	mov	r3, r0
 8003266:	460c      	mov	r4, r1
 8003268:	461a      	mov	r2, r3
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <UART_SetConfig+0x6f4>)
 800326c:	fba3 2302 	umull	r2, r3, r3, r2
 8003270:	095b      	lsrs	r3, r3, #5
 8003272:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	469b      	mov	fp, r3
 800327a:	f04f 0c00 	mov.w	ip, #0
 800327e:	46d9      	mov	r9, fp
 8003280:	46e2      	mov	sl, ip
 8003282:	eb19 0309 	adds.w	r3, r9, r9
 8003286:	eb4a 040a 	adc.w	r4, sl, sl
 800328a:	4699      	mov	r9, r3
 800328c:	46a2      	mov	sl, r4
 800328e:	eb19 090b 	adds.w	r9, r9, fp
 8003292:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032aa:	4689      	mov	r9, r1
 80032ac:	4692      	mov	sl, r2
 80032ae:	eb1b 0509 	adds.w	r5, fp, r9
 80032b2:	eb4c 060a 	adc.w	r6, ip, sl
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4619      	mov	r1, r3
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	0094      	lsls	r4, r2, #2
 80032ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032ce:	008b      	lsls	r3, r1, #2
 80032d0:	461a      	mov	r2, r3
 80032d2:	4623      	mov	r3, r4
 80032d4:	4628      	mov	r0, r5
 80032d6:	4631      	mov	r1, r6
 80032d8:	f7fc ffd2 	bl	8000280 <__aeabi_uldivmod>
 80032dc:	4603      	mov	r3, r0
 80032de:	460c      	mov	r4, r1
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b32      	ldr	r3, [pc, #200]	; (80033ac <UART_SetConfig+0x6f4>)
 80032e4:	fba3 1302 	umull	r1, r3, r3, r2
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	2164      	movs	r1, #100	; 0x64
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	3332      	adds	r3, #50	; 0x32
 80032f6:	4a2d      	ldr	r2, [pc, #180]	; (80033ac <UART_SetConfig+0x6f4>)
 80032f8:	fba2 2303 	umull	r2, r3, r2, r3
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003302:	4498      	add	r8, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	469b      	mov	fp, r3
 8003308:	f04f 0c00 	mov.w	ip, #0
 800330c:	46d9      	mov	r9, fp
 800330e:	46e2      	mov	sl, ip
 8003310:	eb19 0309 	adds.w	r3, r9, r9
 8003314:	eb4a 040a 	adc.w	r4, sl, sl
 8003318:	4699      	mov	r9, r3
 800331a:	46a2      	mov	sl, r4
 800331c:	eb19 090b 	adds.w	r9, r9, fp
 8003320:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003324:	f04f 0100 	mov.w	r1, #0
 8003328:	f04f 0200 	mov.w	r2, #0
 800332c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003330:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003334:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003338:	4689      	mov	r9, r1
 800333a:	4692      	mov	sl, r2
 800333c:	eb1b 0509 	adds.w	r5, fp, r9
 8003340:	eb4c 060a 	adc.w	r6, ip, sl
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4619      	mov	r1, r3
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	0094      	lsls	r4, r2, #2
 8003358:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800335c:	008b      	lsls	r3, r1, #2
 800335e:	461a      	mov	r2, r3
 8003360:	4623      	mov	r3, r4
 8003362:	4628      	mov	r0, r5
 8003364:	4631      	mov	r1, r6
 8003366:	f7fc ff8b 	bl	8000280 <__aeabi_uldivmod>
 800336a:	4603      	mov	r3, r0
 800336c:	460c      	mov	r4, r1
 800336e:	461a      	mov	r2, r3
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <UART_SetConfig+0x6f4>)
 8003372:	fba3 1302 	umull	r1, r3, r3, r2
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2164      	movs	r1, #100	; 0x64
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	3332      	adds	r3, #50	; 0x32
 8003384:	4a09      	ldr	r2, [pc, #36]	; (80033ac <UART_SetConfig+0x6f4>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4442      	add	r2, r8
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	e7ff      	b.n	800339a <UART_SetConfig+0x6e2>
 800339a:	bf00      	nop
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a4:	40011000 	.word	0x40011000
 80033a8:	40011400 	.word	0x40011400
 80033ac:	51eb851f 	.word	0x51eb851f

080033b0 <__errno>:
 80033b0:	4b01      	ldr	r3, [pc, #4]	; (80033b8 <__errno+0x8>)
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000010 	.word	0x20000010

080033bc <__libc_init_array>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	4e0d      	ldr	r6, [pc, #52]	; (80033f4 <__libc_init_array+0x38>)
 80033c0:	4c0d      	ldr	r4, [pc, #52]	; (80033f8 <__libc_init_array+0x3c>)
 80033c2:	1ba4      	subs	r4, r4, r6
 80033c4:	10a4      	asrs	r4, r4, #2
 80033c6:	2500      	movs	r5, #0
 80033c8:	42a5      	cmp	r5, r4
 80033ca:	d109      	bne.n	80033e0 <__libc_init_array+0x24>
 80033cc:	4e0b      	ldr	r6, [pc, #44]	; (80033fc <__libc_init_array+0x40>)
 80033ce:	4c0c      	ldr	r4, [pc, #48]	; (8003400 <__libc_init_array+0x44>)
 80033d0:	f000 fc5c 	bl	8003c8c <_init>
 80033d4:	1ba4      	subs	r4, r4, r6
 80033d6:	10a4      	asrs	r4, r4, #2
 80033d8:	2500      	movs	r5, #0
 80033da:	42a5      	cmp	r5, r4
 80033dc:	d105      	bne.n	80033ea <__libc_init_array+0x2e>
 80033de:	bd70      	pop	{r4, r5, r6, pc}
 80033e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033e4:	4798      	blx	r3
 80033e6:	3501      	adds	r5, #1
 80033e8:	e7ee      	b.n	80033c8 <__libc_init_array+0xc>
 80033ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033ee:	4798      	blx	r3
 80033f0:	3501      	adds	r5, #1
 80033f2:	e7f2      	b.n	80033da <__libc_init_array+0x1e>
 80033f4:	08004314 	.word	0x08004314
 80033f8:	08004314 	.word	0x08004314
 80033fc:	08004314 	.word	0x08004314
 8003400:	08004318 	.word	0x08004318

08003404 <memcpy>:
 8003404:	b510      	push	{r4, lr}
 8003406:	1e43      	subs	r3, r0, #1
 8003408:	440a      	add	r2, r1
 800340a:	4291      	cmp	r1, r2
 800340c:	d100      	bne.n	8003410 <memcpy+0xc>
 800340e:	bd10      	pop	{r4, pc}
 8003410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003418:	e7f7      	b.n	800340a <memcpy+0x6>

0800341a <memset>:
 800341a:	4402      	add	r2, r0
 800341c:	4603      	mov	r3, r0
 800341e:	4293      	cmp	r3, r2
 8003420:	d100      	bne.n	8003424 <memset+0xa>
 8003422:	4770      	bx	lr
 8003424:	f803 1b01 	strb.w	r1, [r3], #1
 8003428:	e7f9      	b.n	800341e <memset+0x4>
	...

0800342c <sniprintf>:
 800342c:	b40c      	push	{r2, r3}
 800342e:	b530      	push	{r4, r5, lr}
 8003430:	4b17      	ldr	r3, [pc, #92]	; (8003490 <sniprintf+0x64>)
 8003432:	1e0c      	subs	r4, r1, #0
 8003434:	b09d      	sub	sp, #116	; 0x74
 8003436:	681d      	ldr	r5, [r3, #0]
 8003438:	da08      	bge.n	800344c <sniprintf+0x20>
 800343a:	238b      	movs	r3, #139	; 0x8b
 800343c:	602b      	str	r3, [r5, #0]
 800343e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003442:	b01d      	add	sp, #116	; 0x74
 8003444:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003448:	b002      	add	sp, #8
 800344a:	4770      	bx	lr
 800344c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003450:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003454:	bf14      	ite	ne
 8003456:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800345a:	4623      	moveq	r3, r4
 800345c:	9304      	str	r3, [sp, #16]
 800345e:	9307      	str	r3, [sp, #28]
 8003460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003464:	9002      	str	r0, [sp, #8]
 8003466:	9006      	str	r0, [sp, #24]
 8003468:	f8ad 3016 	strh.w	r3, [sp, #22]
 800346c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800346e:	ab21      	add	r3, sp, #132	; 0x84
 8003470:	a902      	add	r1, sp, #8
 8003472:	4628      	mov	r0, r5
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	f000 f887 	bl	8003588 <_svfiprintf_r>
 800347a:	1c43      	adds	r3, r0, #1
 800347c:	bfbc      	itt	lt
 800347e:	238b      	movlt	r3, #139	; 0x8b
 8003480:	602b      	strlt	r3, [r5, #0]
 8003482:	2c00      	cmp	r4, #0
 8003484:	d0dd      	beq.n	8003442 <sniprintf+0x16>
 8003486:	9b02      	ldr	r3, [sp, #8]
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	e7d9      	b.n	8003442 <sniprintf+0x16>
 800348e:	bf00      	nop
 8003490:	20000010 	.word	0x20000010

08003494 <siprintf>:
 8003494:	b40e      	push	{r1, r2, r3}
 8003496:	b500      	push	{lr}
 8003498:	b09c      	sub	sp, #112	; 0x70
 800349a:	ab1d      	add	r3, sp, #116	; 0x74
 800349c:	9002      	str	r0, [sp, #8]
 800349e:	9006      	str	r0, [sp, #24]
 80034a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80034a4:	4809      	ldr	r0, [pc, #36]	; (80034cc <siprintf+0x38>)
 80034a6:	9107      	str	r1, [sp, #28]
 80034a8:	9104      	str	r1, [sp, #16]
 80034aa:	4909      	ldr	r1, [pc, #36]	; (80034d0 <siprintf+0x3c>)
 80034ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80034b0:	9105      	str	r1, [sp, #20]
 80034b2:	6800      	ldr	r0, [r0, #0]
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	a902      	add	r1, sp, #8
 80034b8:	f000 f866 	bl	8003588 <_svfiprintf_r>
 80034bc:	9b02      	ldr	r3, [sp, #8]
 80034be:	2200      	movs	r2, #0
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	b01c      	add	sp, #112	; 0x70
 80034c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034c8:	b003      	add	sp, #12
 80034ca:	4770      	bx	lr
 80034cc:	20000010 	.word	0x20000010
 80034d0:	ffff0208 	.word	0xffff0208

080034d4 <__ssputs_r>:
 80034d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d8:	688e      	ldr	r6, [r1, #8]
 80034da:	429e      	cmp	r6, r3
 80034dc:	4682      	mov	sl, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	4690      	mov	r8, r2
 80034e2:	4699      	mov	r9, r3
 80034e4:	d837      	bhi.n	8003556 <__ssputs_r+0x82>
 80034e6:	898a      	ldrh	r2, [r1, #12]
 80034e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80034ec:	d031      	beq.n	8003552 <__ssputs_r+0x7e>
 80034ee:	6825      	ldr	r5, [r4, #0]
 80034f0:	6909      	ldr	r1, [r1, #16]
 80034f2:	1a6f      	subs	r7, r5, r1
 80034f4:	6965      	ldr	r5, [r4, #20]
 80034f6:	2302      	movs	r3, #2
 80034f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003500:	f109 0301 	add.w	r3, r9, #1
 8003504:	443b      	add	r3, r7
 8003506:	429d      	cmp	r5, r3
 8003508:	bf38      	it	cc
 800350a:	461d      	movcc	r5, r3
 800350c:	0553      	lsls	r3, r2, #21
 800350e:	d530      	bpl.n	8003572 <__ssputs_r+0x9e>
 8003510:	4629      	mov	r1, r5
 8003512:	f000 fb21 	bl	8003b58 <_malloc_r>
 8003516:	4606      	mov	r6, r0
 8003518:	b950      	cbnz	r0, 8003530 <__ssputs_r+0x5c>
 800351a:	230c      	movs	r3, #12
 800351c:	f8ca 3000 	str.w	r3, [sl]
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003526:	81a3      	strh	r3, [r4, #12]
 8003528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800352c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003530:	463a      	mov	r2, r7
 8003532:	6921      	ldr	r1, [r4, #16]
 8003534:	f7ff ff66 	bl	8003404 <memcpy>
 8003538:	89a3      	ldrh	r3, [r4, #12]
 800353a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800353e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003542:	81a3      	strh	r3, [r4, #12]
 8003544:	6126      	str	r6, [r4, #16]
 8003546:	6165      	str	r5, [r4, #20]
 8003548:	443e      	add	r6, r7
 800354a:	1bed      	subs	r5, r5, r7
 800354c:	6026      	str	r6, [r4, #0]
 800354e:	60a5      	str	r5, [r4, #8]
 8003550:	464e      	mov	r6, r9
 8003552:	454e      	cmp	r6, r9
 8003554:	d900      	bls.n	8003558 <__ssputs_r+0x84>
 8003556:	464e      	mov	r6, r9
 8003558:	4632      	mov	r2, r6
 800355a:	4641      	mov	r1, r8
 800355c:	6820      	ldr	r0, [r4, #0]
 800355e:	f000 fa93 	bl	8003a88 <memmove>
 8003562:	68a3      	ldr	r3, [r4, #8]
 8003564:	1b9b      	subs	r3, r3, r6
 8003566:	60a3      	str	r3, [r4, #8]
 8003568:	6823      	ldr	r3, [r4, #0]
 800356a:	441e      	add	r6, r3
 800356c:	6026      	str	r6, [r4, #0]
 800356e:	2000      	movs	r0, #0
 8003570:	e7dc      	b.n	800352c <__ssputs_r+0x58>
 8003572:	462a      	mov	r2, r5
 8003574:	f000 fb4a 	bl	8003c0c <_realloc_r>
 8003578:	4606      	mov	r6, r0
 800357a:	2800      	cmp	r0, #0
 800357c:	d1e2      	bne.n	8003544 <__ssputs_r+0x70>
 800357e:	6921      	ldr	r1, [r4, #16]
 8003580:	4650      	mov	r0, sl
 8003582:	f000 fa9b 	bl	8003abc <_free_r>
 8003586:	e7c8      	b.n	800351a <__ssputs_r+0x46>

08003588 <_svfiprintf_r>:
 8003588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358c:	461d      	mov	r5, r3
 800358e:	898b      	ldrh	r3, [r1, #12]
 8003590:	061f      	lsls	r7, r3, #24
 8003592:	b09d      	sub	sp, #116	; 0x74
 8003594:	4680      	mov	r8, r0
 8003596:	460c      	mov	r4, r1
 8003598:	4616      	mov	r6, r2
 800359a:	d50f      	bpl.n	80035bc <_svfiprintf_r+0x34>
 800359c:	690b      	ldr	r3, [r1, #16]
 800359e:	b96b      	cbnz	r3, 80035bc <_svfiprintf_r+0x34>
 80035a0:	2140      	movs	r1, #64	; 0x40
 80035a2:	f000 fad9 	bl	8003b58 <_malloc_r>
 80035a6:	6020      	str	r0, [r4, #0]
 80035a8:	6120      	str	r0, [r4, #16]
 80035aa:	b928      	cbnz	r0, 80035b8 <_svfiprintf_r+0x30>
 80035ac:	230c      	movs	r3, #12
 80035ae:	f8c8 3000 	str.w	r3, [r8]
 80035b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b6:	e0c8      	b.n	800374a <_svfiprintf_r+0x1c2>
 80035b8:	2340      	movs	r3, #64	; 0x40
 80035ba:	6163      	str	r3, [r4, #20]
 80035bc:	2300      	movs	r3, #0
 80035be:	9309      	str	r3, [sp, #36]	; 0x24
 80035c0:	2320      	movs	r3, #32
 80035c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035c6:	2330      	movs	r3, #48	; 0x30
 80035c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035cc:	9503      	str	r5, [sp, #12]
 80035ce:	f04f 0b01 	mov.w	fp, #1
 80035d2:	4637      	mov	r7, r6
 80035d4:	463d      	mov	r5, r7
 80035d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035da:	b10b      	cbz	r3, 80035e0 <_svfiprintf_r+0x58>
 80035dc:	2b25      	cmp	r3, #37	; 0x25
 80035de:	d13e      	bne.n	800365e <_svfiprintf_r+0xd6>
 80035e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80035e4:	d00b      	beq.n	80035fe <_svfiprintf_r+0x76>
 80035e6:	4653      	mov	r3, sl
 80035e8:	4632      	mov	r2, r6
 80035ea:	4621      	mov	r1, r4
 80035ec:	4640      	mov	r0, r8
 80035ee:	f7ff ff71 	bl	80034d4 <__ssputs_r>
 80035f2:	3001      	adds	r0, #1
 80035f4:	f000 80a4 	beq.w	8003740 <_svfiprintf_r+0x1b8>
 80035f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035fa:	4453      	add	r3, sl
 80035fc:	9309      	str	r3, [sp, #36]	; 0x24
 80035fe:	783b      	ldrb	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 809d 	beq.w	8003740 <_svfiprintf_r+0x1b8>
 8003606:	2300      	movs	r3, #0
 8003608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800360c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003610:	9304      	str	r3, [sp, #16]
 8003612:	9307      	str	r3, [sp, #28]
 8003614:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003618:	931a      	str	r3, [sp, #104]	; 0x68
 800361a:	462f      	mov	r7, r5
 800361c:	2205      	movs	r2, #5
 800361e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003622:	4850      	ldr	r0, [pc, #320]	; (8003764 <_svfiprintf_r+0x1dc>)
 8003624:	f7fc fddc 	bl	80001e0 <memchr>
 8003628:	9b04      	ldr	r3, [sp, #16]
 800362a:	b9d0      	cbnz	r0, 8003662 <_svfiprintf_r+0xda>
 800362c:	06d9      	lsls	r1, r3, #27
 800362e:	bf44      	itt	mi
 8003630:	2220      	movmi	r2, #32
 8003632:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003636:	071a      	lsls	r2, r3, #28
 8003638:	bf44      	itt	mi
 800363a:	222b      	movmi	r2, #43	; 0x2b
 800363c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003640:	782a      	ldrb	r2, [r5, #0]
 8003642:	2a2a      	cmp	r2, #42	; 0x2a
 8003644:	d015      	beq.n	8003672 <_svfiprintf_r+0xea>
 8003646:	9a07      	ldr	r2, [sp, #28]
 8003648:	462f      	mov	r7, r5
 800364a:	2000      	movs	r0, #0
 800364c:	250a      	movs	r5, #10
 800364e:	4639      	mov	r1, r7
 8003650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003654:	3b30      	subs	r3, #48	; 0x30
 8003656:	2b09      	cmp	r3, #9
 8003658:	d94d      	bls.n	80036f6 <_svfiprintf_r+0x16e>
 800365a:	b1b8      	cbz	r0, 800368c <_svfiprintf_r+0x104>
 800365c:	e00f      	b.n	800367e <_svfiprintf_r+0xf6>
 800365e:	462f      	mov	r7, r5
 8003660:	e7b8      	b.n	80035d4 <_svfiprintf_r+0x4c>
 8003662:	4a40      	ldr	r2, [pc, #256]	; (8003764 <_svfiprintf_r+0x1dc>)
 8003664:	1a80      	subs	r0, r0, r2
 8003666:	fa0b f000 	lsl.w	r0, fp, r0
 800366a:	4318      	orrs	r0, r3
 800366c:	9004      	str	r0, [sp, #16]
 800366e:	463d      	mov	r5, r7
 8003670:	e7d3      	b.n	800361a <_svfiprintf_r+0x92>
 8003672:	9a03      	ldr	r2, [sp, #12]
 8003674:	1d11      	adds	r1, r2, #4
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	9103      	str	r1, [sp, #12]
 800367a:	2a00      	cmp	r2, #0
 800367c:	db01      	blt.n	8003682 <_svfiprintf_r+0xfa>
 800367e:	9207      	str	r2, [sp, #28]
 8003680:	e004      	b.n	800368c <_svfiprintf_r+0x104>
 8003682:	4252      	negs	r2, r2
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	9207      	str	r2, [sp, #28]
 800368a:	9304      	str	r3, [sp, #16]
 800368c:	783b      	ldrb	r3, [r7, #0]
 800368e:	2b2e      	cmp	r3, #46	; 0x2e
 8003690:	d10c      	bne.n	80036ac <_svfiprintf_r+0x124>
 8003692:	787b      	ldrb	r3, [r7, #1]
 8003694:	2b2a      	cmp	r3, #42	; 0x2a
 8003696:	d133      	bne.n	8003700 <_svfiprintf_r+0x178>
 8003698:	9b03      	ldr	r3, [sp, #12]
 800369a:	1d1a      	adds	r2, r3, #4
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	9203      	str	r2, [sp, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	bfb8      	it	lt
 80036a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80036a8:	3702      	adds	r7, #2
 80036aa:	9305      	str	r3, [sp, #20]
 80036ac:	4d2e      	ldr	r5, [pc, #184]	; (8003768 <_svfiprintf_r+0x1e0>)
 80036ae:	7839      	ldrb	r1, [r7, #0]
 80036b0:	2203      	movs	r2, #3
 80036b2:	4628      	mov	r0, r5
 80036b4:	f7fc fd94 	bl	80001e0 <memchr>
 80036b8:	b138      	cbz	r0, 80036ca <_svfiprintf_r+0x142>
 80036ba:	2340      	movs	r3, #64	; 0x40
 80036bc:	1b40      	subs	r0, r0, r5
 80036be:	fa03 f000 	lsl.w	r0, r3, r0
 80036c2:	9b04      	ldr	r3, [sp, #16]
 80036c4:	4303      	orrs	r3, r0
 80036c6:	3701      	adds	r7, #1
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	7839      	ldrb	r1, [r7, #0]
 80036cc:	4827      	ldr	r0, [pc, #156]	; (800376c <_svfiprintf_r+0x1e4>)
 80036ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036d2:	2206      	movs	r2, #6
 80036d4:	1c7e      	adds	r6, r7, #1
 80036d6:	f7fc fd83 	bl	80001e0 <memchr>
 80036da:	2800      	cmp	r0, #0
 80036dc:	d038      	beq.n	8003750 <_svfiprintf_r+0x1c8>
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <_svfiprintf_r+0x1e8>)
 80036e0:	bb13      	cbnz	r3, 8003728 <_svfiprintf_r+0x1a0>
 80036e2:	9b03      	ldr	r3, [sp, #12]
 80036e4:	3307      	adds	r3, #7
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	3308      	adds	r3, #8
 80036ec:	9303      	str	r3, [sp, #12]
 80036ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036f0:	444b      	add	r3, r9
 80036f2:	9309      	str	r3, [sp, #36]	; 0x24
 80036f4:	e76d      	b.n	80035d2 <_svfiprintf_r+0x4a>
 80036f6:	fb05 3202 	mla	r2, r5, r2, r3
 80036fa:	2001      	movs	r0, #1
 80036fc:	460f      	mov	r7, r1
 80036fe:	e7a6      	b.n	800364e <_svfiprintf_r+0xc6>
 8003700:	2300      	movs	r3, #0
 8003702:	3701      	adds	r7, #1
 8003704:	9305      	str	r3, [sp, #20]
 8003706:	4619      	mov	r1, r3
 8003708:	250a      	movs	r5, #10
 800370a:	4638      	mov	r0, r7
 800370c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003710:	3a30      	subs	r2, #48	; 0x30
 8003712:	2a09      	cmp	r2, #9
 8003714:	d903      	bls.n	800371e <_svfiprintf_r+0x196>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0c8      	beq.n	80036ac <_svfiprintf_r+0x124>
 800371a:	9105      	str	r1, [sp, #20]
 800371c:	e7c6      	b.n	80036ac <_svfiprintf_r+0x124>
 800371e:	fb05 2101 	mla	r1, r5, r1, r2
 8003722:	2301      	movs	r3, #1
 8003724:	4607      	mov	r7, r0
 8003726:	e7f0      	b.n	800370a <_svfiprintf_r+0x182>
 8003728:	ab03      	add	r3, sp, #12
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4622      	mov	r2, r4
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <_svfiprintf_r+0x1ec>)
 8003730:	a904      	add	r1, sp, #16
 8003732:	4640      	mov	r0, r8
 8003734:	f3af 8000 	nop.w
 8003738:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800373c:	4681      	mov	r9, r0
 800373e:	d1d6      	bne.n	80036ee <_svfiprintf_r+0x166>
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	065b      	lsls	r3, r3, #25
 8003744:	f53f af35 	bmi.w	80035b2 <_svfiprintf_r+0x2a>
 8003748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800374a:	b01d      	add	sp, #116	; 0x74
 800374c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003750:	ab03      	add	r3, sp, #12
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	4622      	mov	r2, r4
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <_svfiprintf_r+0x1ec>)
 8003758:	a904      	add	r1, sp, #16
 800375a:	4640      	mov	r0, r8
 800375c:	f000 f882 	bl	8003864 <_printf_i>
 8003760:	e7ea      	b.n	8003738 <_svfiprintf_r+0x1b0>
 8003762:	bf00      	nop
 8003764:	080042d8 	.word	0x080042d8
 8003768:	080042de 	.word	0x080042de
 800376c:	080042e2 	.word	0x080042e2
 8003770:	00000000 	.word	0x00000000
 8003774:	080034d5 	.word	0x080034d5

08003778 <_printf_common>:
 8003778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800377c:	4691      	mov	r9, r2
 800377e:	461f      	mov	r7, r3
 8003780:	688a      	ldr	r2, [r1, #8]
 8003782:	690b      	ldr	r3, [r1, #16]
 8003784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003788:	4293      	cmp	r3, r2
 800378a:	bfb8      	it	lt
 800378c:	4613      	movlt	r3, r2
 800378e:	f8c9 3000 	str.w	r3, [r9]
 8003792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003796:	4606      	mov	r6, r0
 8003798:	460c      	mov	r4, r1
 800379a:	b112      	cbz	r2, 80037a2 <_printf_common+0x2a>
 800379c:	3301      	adds	r3, #1
 800379e:	f8c9 3000 	str.w	r3, [r9]
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	0699      	lsls	r1, r3, #26
 80037a6:	bf42      	ittt	mi
 80037a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80037ac:	3302      	addmi	r3, #2
 80037ae:	f8c9 3000 	strmi.w	r3, [r9]
 80037b2:	6825      	ldr	r5, [r4, #0]
 80037b4:	f015 0506 	ands.w	r5, r5, #6
 80037b8:	d107      	bne.n	80037ca <_printf_common+0x52>
 80037ba:	f104 0a19 	add.w	sl, r4, #25
 80037be:	68e3      	ldr	r3, [r4, #12]
 80037c0:	f8d9 2000 	ldr.w	r2, [r9]
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	42ab      	cmp	r3, r5
 80037c8:	dc28      	bgt.n	800381c <_printf_common+0xa4>
 80037ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	3300      	adds	r3, #0
 80037d2:	bf18      	it	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	0692      	lsls	r2, r2, #26
 80037d8:	d42d      	bmi.n	8003836 <_printf_common+0xbe>
 80037da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037de:	4639      	mov	r1, r7
 80037e0:	4630      	mov	r0, r6
 80037e2:	47c0      	blx	r8
 80037e4:	3001      	adds	r0, #1
 80037e6:	d020      	beq.n	800382a <_printf_common+0xb2>
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	68e5      	ldr	r5, [r4, #12]
 80037ec:	f8d9 2000 	ldr.w	r2, [r9]
 80037f0:	f003 0306 	and.w	r3, r3, #6
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	bf08      	it	eq
 80037f8:	1aad      	subeq	r5, r5, r2
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	6922      	ldr	r2, [r4, #16]
 80037fe:	bf0c      	ite	eq
 8003800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003804:	2500      	movne	r5, #0
 8003806:	4293      	cmp	r3, r2
 8003808:	bfc4      	itt	gt
 800380a:	1a9b      	subgt	r3, r3, r2
 800380c:	18ed      	addgt	r5, r5, r3
 800380e:	f04f 0900 	mov.w	r9, #0
 8003812:	341a      	adds	r4, #26
 8003814:	454d      	cmp	r5, r9
 8003816:	d11a      	bne.n	800384e <_printf_common+0xd6>
 8003818:	2000      	movs	r0, #0
 800381a:	e008      	b.n	800382e <_printf_common+0xb6>
 800381c:	2301      	movs	r3, #1
 800381e:	4652      	mov	r2, sl
 8003820:	4639      	mov	r1, r7
 8003822:	4630      	mov	r0, r6
 8003824:	47c0      	blx	r8
 8003826:	3001      	adds	r0, #1
 8003828:	d103      	bne.n	8003832 <_printf_common+0xba>
 800382a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800382e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003832:	3501      	adds	r5, #1
 8003834:	e7c3      	b.n	80037be <_printf_common+0x46>
 8003836:	18e1      	adds	r1, r4, r3
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	2030      	movs	r0, #48	; 0x30
 800383c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003840:	4422      	add	r2, r4
 8003842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800384a:	3302      	adds	r3, #2
 800384c:	e7c5      	b.n	80037da <_printf_common+0x62>
 800384e:	2301      	movs	r3, #1
 8003850:	4622      	mov	r2, r4
 8003852:	4639      	mov	r1, r7
 8003854:	4630      	mov	r0, r6
 8003856:	47c0      	blx	r8
 8003858:	3001      	adds	r0, #1
 800385a:	d0e6      	beq.n	800382a <_printf_common+0xb2>
 800385c:	f109 0901 	add.w	r9, r9, #1
 8003860:	e7d8      	b.n	8003814 <_printf_common+0x9c>
	...

08003864 <_printf_i>:
 8003864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003868:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800386c:	460c      	mov	r4, r1
 800386e:	7e09      	ldrb	r1, [r1, #24]
 8003870:	b085      	sub	sp, #20
 8003872:	296e      	cmp	r1, #110	; 0x6e
 8003874:	4617      	mov	r7, r2
 8003876:	4606      	mov	r6, r0
 8003878:	4698      	mov	r8, r3
 800387a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800387c:	f000 80b3 	beq.w	80039e6 <_printf_i+0x182>
 8003880:	d822      	bhi.n	80038c8 <_printf_i+0x64>
 8003882:	2963      	cmp	r1, #99	; 0x63
 8003884:	d036      	beq.n	80038f4 <_printf_i+0x90>
 8003886:	d80a      	bhi.n	800389e <_printf_i+0x3a>
 8003888:	2900      	cmp	r1, #0
 800388a:	f000 80b9 	beq.w	8003a00 <_printf_i+0x19c>
 800388e:	2958      	cmp	r1, #88	; 0x58
 8003890:	f000 8083 	beq.w	800399a <_printf_i+0x136>
 8003894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003898:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800389c:	e032      	b.n	8003904 <_printf_i+0xa0>
 800389e:	2964      	cmp	r1, #100	; 0x64
 80038a0:	d001      	beq.n	80038a6 <_printf_i+0x42>
 80038a2:	2969      	cmp	r1, #105	; 0x69
 80038a4:	d1f6      	bne.n	8003894 <_printf_i+0x30>
 80038a6:	6820      	ldr	r0, [r4, #0]
 80038a8:	6813      	ldr	r3, [r2, #0]
 80038aa:	0605      	lsls	r5, r0, #24
 80038ac:	f103 0104 	add.w	r1, r3, #4
 80038b0:	d52a      	bpl.n	8003908 <_printf_i+0xa4>
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6011      	str	r1, [r2, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da03      	bge.n	80038c2 <_printf_i+0x5e>
 80038ba:	222d      	movs	r2, #45	; 0x2d
 80038bc:	425b      	negs	r3, r3
 80038be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80038c2:	486f      	ldr	r0, [pc, #444]	; (8003a80 <_printf_i+0x21c>)
 80038c4:	220a      	movs	r2, #10
 80038c6:	e039      	b.n	800393c <_printf_i+0xd8>
 80038c8:	2973      	cmp	r1, #115	; 0x73
 80038ca:	f000 809d 	beq.w	8003a08 <_printf_i+0x1a4>
 80038ce:	d808      	bhi.n	80038e2 <_printf_i+0x7e>
 80038d0:	296f      	cmp	r1, #111	; 0x6f
 80038d2:	d020      	beq.n	8003916 <_printf_i+0xb2>
 80038d4:	2970      	cmp	r1, #112	; 0x70
 80038d6:	d1dd      	bne.n	8003894 <_printf_i+0x30>
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	f043 0320 	orr.w	r3, r3, #32
 80038de:	6023      	str	r3, [r4, #0]
 80038e0:	e003      	b.n	80038ea <_printf_i+0x86>
 80038e2:	2975      	cmp	r1, #117	; 0x75
 80038e4:	d017      	beq.n	8003916 <_printf_i+0xb2>
 80038e6:	2978      	cmp	r1, #120	; 0x78
 80038e8:	d1d4      	bne.n	8003894 <_printf_i+0x30>
 80038ea:	2378      	movs	r3, #120	; 0x78
 80038ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80038f0:	4864      	ldr	r0, [pc, #400]	; (8003a84 <_printf_i+0x220>)
 80038f2:	e055      	b.n	80039a0 <_printf_i+0x13c>
 80038f4:	6813      	ldr	r3, [r2, #0]
 80038f6:	1d19      	adds	r1, r3, #4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6011      	str	r1, [r2, #0]
 80038fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003904:	2301      	movs	r3, #1
 8003906:	e08c      	b.n	8003a22 <_printf_i+0x1be>
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6011      	str	r1, [r2, #0]
 800390c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003910:	bf18      	it	ne
 8003912:	b21b      	sxthne	r3, r3
 8003914:	e7cf      	b.n	80038b6 <_printf_i+0x52>
 8003916:	6813      	ldr	r3, [r2, #0]
 8003918:	6825      	ldr	r5, [r4, #0]
 800391a:	1d18      	adds	r0, r3, #4
 800391c:	6010      	str	r0, [r2, #0]
 800391e:	0628      	lsls	r0, r5, #24
 8003920:	d501      	bpl.n	8003926 <_printf_i+0xc2>
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	e002      	b.n	800392c <_printf_i+0xc8>
 8003926:	0668      	lsls	r0, r5, #25
 8003928:	d5fb      	bpl.n	8003922 <_printf_i+0xbe>
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	4854      	ldr	r0, [pc, #336]	; (8003a80 <_printf_i+0x21c>)
 800392e:	296f      	cmp	r1, #111	; 0x6f
 8003930:	bf14      	ite	ne
 8003932:	220a      	movne	r2, #10
 8003934:	2208      	moveq	r2, #8
 8003936:	2100      	movs	r1, #0
 8003938:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800393c:	6865      	ldr	r5, [r4, #4]
 800393e:	60a5      	str	r5, [r4, #8]
 8003940:	2d00      	cmp	r5, #0
 8003942:	f2c0 8095 	blt.w	8003a70 <_printf_i+0x20c>
 8003946:	6821      	ldr	r1, [r4, #0]
 8003948:	f021 0104 	bic.w	r1, r1, #4
 800394c:	6021      	str	r1, [r4, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d13d      	bne.n	80039ce <_printf_i+0x16a>
 8003952:	2d00      	cmp	r5, #0
 8003954:	f040 808e 	bne.w	8003a74 <_printf_i+0x210>
 8003958:	4665      	mov	r5, ip
 800395a:	2a08      	cmp	r2, #8
 800395c:	d10b      	bne.n	8003976 <_printf_i+0x112>
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	07db      	lsls	r3, r3, #31
 8003962:	d508      	bpl.n	8003976 <_printf_i+0x112>
 8003964:	6923      	ldr	r3, [r4, #16]
 8003966:	6862      	ldr	r2, [r4, #4]
 8003968:	429a      	cmp	r2, r3
 800396a:	bfde      	ittt	le
 800396c:	2330      	movle	r3, #48	; 0x30
 800396e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003972:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003976:	ebac 0305 	sub.w	r3, ip, r5
 800397a:	6123      	str	r3, [r4, #16]
 800397c:	f8cd 8000 	str.w	r8, [sp]
 8003980:	463b      	mov	r3, r7
 8003982:	aa03      	add	r2, sp, #12
 8003984:	4621      	mov	r1, r4
 8003986:	4630      	mov	r0, r6
 8003988:	f7ff fef6 	bl	8003778 <_printf_common>
 800398c:	3001      	adds	r0, #1
 800398e:	d14d      	bne.n	8003a2c <_printf_i+0x1c8>
 8003990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003994:	b005      	add	sp, #20
 8003996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800399a:	4839      	ldr	r0, [pc, #228]	; (8003a80 <_printf_i+0x21c>)
 800399c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039a0:	6813      	ldr	r3, [r2, #0]
 80039a2:	6821      	ldr	r1, [r4, #0]
 80039a4:	1d1d      	adds	r5, r3, #4
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6015      	str	r5, [r2, #0]
 80039aa:	060a      	lsls	r2, r1, #24
 80039ac:	d50b      	bpl.n	80039c6 <_printf_i+0x162>
 80039ae:	07ca      	lsls	r2, r1, #31
 80039b0:	bf44      	itt	mi
 80039b2:	f041 0120 	orrmi.w	r1, r1, #32
 80039b6:	6021      	strmi	r1, [r4, #0]
 80039b8:	b91b      	cbnz	r3, 80039c2 <_printf_i+0x15e>
 80039ba:	6822      	ldr	r2, [r4, #0]
 80039bc:	f022 0220 	bic.w	r2, r2, #32
 80039c0:	6022      	str	r2, [r4, #0]
 80039c2:	2210      	movs	r2, #16
 80039c4:	e7b7      	b.n	8003936 <_printf_i+0xd2>
 80039c6:	064d      	lsls	r5, r1, #25
 80039c8:	bf48      	it	mi
 80039ca:	b29b      	uxthmi	r3, r3
 80039cc:	e7ef      	b.n	80039ae <_printf_i+0x14a>
 80039ce:	4665      	mov	r5, ip
 80039d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80039d4:	fb02 3311 	mls	r3, r2, r1, r3
 80039d8:	5cc3      	ldrb	r3, [r0, r3]
 80039da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80039de:	460b      	mov	r3, r1
 80039e0:	2900      	cmp	r1, #0
 80039e2:	d1f5      	bne.n	80039d0 <_printf_i+0x16c>
 80039e4:	e7b9      	b.n	800395a <_printf_i+0xf6>
 80039e6:	6813      	ldr	r3, [r2, #0]
 80039e8:	6825      	ldr	r5, [r4, #0]
 80039ea:	6961      	ldr	r1, [r4, #20]
 80039ec:	1d18      	adds	r0, r3, #4
 80039ee:	6010      	str	r0, [r2, #0]
 80039f0:	0628      	lsls	r0, r5, #24
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	d501      	bpl.n	80039fa <_printf_i+0x196>
 80039f6:	6019      	str	r1, [r3, #0]
 80039f8:	e002      	b.n	8003a00 <_printf_i+0x19c>
 80039fa:	066a      	lsls	r2, r5, #25
 80039fc:	d5fb      	bpl.n	80039f6 <_printf_i+0x192>
 80039fe:	8019      	strh	r1, [r3, #0]
 8003a00:	2300      	movs	r3, #0
 8003a02:	6123      	str	r3, [r4, #16]
 8003a04:	4665      	mov	r5, ip
 8003a06:	e7b9      	b.n	800397c <_printf_i+0x118>
 8003a08:	6813      	ldr	r3, [r2, #0]
 8003a0a:	1d19      	adds	r1, r3, #4
 8003a0c:	6011      	str	r1, [r2, #0]
 8003a0e:	681d      	ldr	r5, [r3, #0]
 8003a10:	6862      	ldr	r2, [r4, #4]
 8003a12:	2100      	movs	r1, #0
 8003a14:	4628      	mov	r0, r5
 8003a16:	f7fc fbe3 	bl	80001e0 <memchr>
 8003a1a:	b108      	cbz	r0, 8003a20 <_printf_i+0x1bc>
 8003a1c:	1b40      	subs	r0, r0, r5
 8003a1e:	6060      	str	r0, [r4, #4]
 8003a20:	6863      	ldr	r3, [r4, #4]
 8003a22:	6123      	str	r3, [r4, #16]
 8003a24:	2300      	movs	r3, #0
 8003a26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a2a:	e7a7      	b.n	800397c <_printf_i+0x118>
 8003a2c:	6923      	ldr	r3, [r4, #16]
 8003a2e:	462a      	mov	r2, r5
 8003a30:	4639      	mov	r1, r7
 8003a32:	4630      	mov	r0, r6
 8003a34:	47c0      	blx	r8
 8003a36:	3001      	adds	r0, #1
 8003a38:	d0aa      	beq.n	8003990 <_printf_i+0x12c>
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	079b      	lsls	r3, r3, #30
 8003a3e:	d413      	bmi.n	8003a68 <_printf_i+0x204>
 8003a40:	68e0      	ldr	r0, [r4, #12]
 8003a42:	9b03      	ldr	r3, [sp, #12]
 8003a44:	4298      	cmp	r0, r3
 8003a46:	bfb8      	it	lt
 8003a48:	4618      	movlt	r0, r3
 8003a4a:	e7a3      	b.n	8003994 <_printf_i+0x130>
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	464a      	mov	r2, r9
 8003a50:	4639      	mov	r1, r7
 8003a52:	4630      	mov	r0, r6
 8003a54:	47c0      	blx	r8
 8003a56:	3001      	adds	r0, #1
 8003a58:	d09a      	beq.n	8003990 <_printf_i+0x12c>
 8003a5a:	3501      	adds	r5, #1
 8003a5c:	68e3      	ldr	r3, [r4, #12]
 8003a5e:	9a03      	ldr	r2, [sp, #12]
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	42ab      	cmp	r3, r5
 8003a64:	dcf2      	bgt.n	8003a4c <_printf_i+0x1e8>
 8003a66:	e7eb      	b.n	8003a40 <_printf_i+0x1dc>
 8003a68:	2500      	movs	r5, #0
 8003a6a:	f104 0919 	add.w	r9, r4, #25
 8003a6e:	e7f5      	b.n	8003a5c <_printf_i+0x1f8>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1ac      	bne.n	80039ce <_printf_i+0x16a>
 8003a74:	7803      	ldrb	r3, [r0, #0]
 8003a76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a7e:	e76c      	b.n	800395a <_printf_i+0xf6>
 8003a80:	080042e9 	.word	0x080042e9
 8003a84:	080042fa 	.word	0x080042fa

08003a88 <memmove>:
 8003a88:	4288      	cmp	r0, r1
 8003a8a:	b510      	push	{r4, lr}
 8003a8c:	eb01 0302 	add.w	r3, r1, r2
 8003a90:	d807      	bhi.n	8003aa2 <memmove+0x1a>
 8003a92:	1e42      	subs	r2, r0, #1
 8003a94:	4299      	cmp	r1, r3
 8003a96:	d00a      	beq.n	8003aae <memmove+0x26>
 8003a98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003aa0:	e7f8      	b.n	8003a94 <memmove+0xc>
 8003aa2:	4283      	cmp	r3, r0
 8003aa4:	d9f5      	bls.n	8003a92 <memmove+0xa>
 8003aa6:	1881      	adds	r1, r0, r2
 8003aa8:	1ad2      	subs	r2, r2, r3
 8003aaa:	42d3      	cmn	r3, r2
 8003aac:	d100      	bne.n	8003ab0 <memmove+0x28>
 8003aae:	bd10      	pop	{r4, pc}
 8003ab0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ab4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ab8:	e7f7      	b.n	8003aaa <memmove+0x22>
	...

08003abc <_free_r>:
 8003abc:	b538      	push	{r3, r4, r5, lr}
 8003abe:	4605      	mov	r5, r0
 8003ac0:	2900      	cmp	r1, #0
 8003ac2:	d045      	beq.n	8003b50 <_free_r+0x94>
 8003ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ac8:	1f0c      	subs	r4, r1, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bfb8      	it	lt
 8003ace:	18e4      	addlt	r4, r4, r3
 8003ad0:	f000 f8d2 	bl	8003c78 <__malloc_lock>
 8003ad4:	4a1f      	ldr	r2, [pc, #124]	; (8003b54 <_free_r+0x98>)
 8003ad6:	6813      	ldr	r3, [r2, #0]
 8003ad8:	4610      	mov	r0, r2
 8003ada:	b933      	cbnz	r3, 8003aea <_free_r+0x2e>
 8003adc:	6063      	str	r3, [r4, #4]
 8003ade:	6014      	str	r4, [r2, #0]
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ae6:	f000 b8c8 	b.w	8003c7a <__malloc_unlock>
 8003aea:	42a3      	cmp	r3, r4
 8003aec:	d90c      	bls.n	8003b08 <_free_r+0x4c>
 8003aee:	6821      	ldr	r1, [r4, #0]
 8003af0:	1862      	adds	r2, r4, r1
 8003af2:	4293      	cmp	r3, r2
 8003af4:	bf04      	itt	eq
 8003af6:	681a      	ldreq	r2, [r3, #0]
 8003af8:	685b      	ldreq	r3, [r3, #4]
 8003afa:	6063      	str	r3, [r4, #4]
 8003afc:	bf04      	itt	eq
 8003afe:	1852      	addeq	r2, r2, r1
 8003b00:	6022      	streq	r2, [r4, #0]
 8003b02:	6004      	str	r4, [r0, #0]
 8003b04:	e7ec      	b.n	8003ae0 <_free_r+0x24>
 8003b06:	4613      	mov	r3, r2
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	b10a      	cbz	r2, 8003b10 <_free_r+0x54>
 8003b0c:	42a2      	cmp	r2, r4
 8003b0e:	d9fa      	bls.n	8003b06 <_free_r+0x4a>
 8003b10:	6819      	ldr	r1, [r3, #0]
 8003b12:	1858      	adds	r0, r3, r1
 8003b14:	42a0      	cmp	r0, r4
 8003b16:	d10b      	bne.n	8003b30 <_free_r+0x74>
 8003b18:	6820      	ldr	r0, [r4, #0]
 8003b1a:	4401      	add	r1, r0
 8003b1c:	1858      	adds	r0, r3, r1
 8003b1e:	4282      	cmp	r2, r0
 8003b20:	6019      	str	r1, [r3, #0]
 8003b22:	d1dd      	bne.n	8003ae0 <_free_r+0x24>
 8003b24:	6810      	ldr	r0, [r2, #0]
 8003b26:	6852      	ldr	r2, [r2, #4]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	4401      	add	r1, r0
 8003b2c:	6019      	str	r1, [r3, #0]
 8003b2e:	e7d7      	b.n	8003ae0 <_free_r+0x24>
 8003b30:	d902      	bls.n	8003b38 <_free_r+0x7c>
 8003b32:	230c      	movs	r3, #12
 8003b34:	602b      	str	r3, [r5, #0]
 8003b36:	e7d3      	b.n	8003ae0 <_free_r+0x24>
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	1821      	adds	r1, r4, r0
 8003b3c:	428a      	cmp	r2, r1
 8003b3e:	bf04      	itt	eq
 8003b40:	6811      	ldreq	r1, [r2, #0]
 8003b42:	6852      	ldreq	r2, [r2, #4]
 8003b44:	6062      	str	r2, [r4, #4]
 8003b46:	bf04      	itt	eq
 8003b48:	1809      	addeq	r1, r1, r0
 8003b4a:	6021      	streq	r1, [r4, #0]
 8003b4c:	605c      	str	r4, [r3, #4]
 8003b4e:	e7c7      	b.n	8003ae0 <_free_r+0x24>
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	bf00      	nop
 8003b54:	20000198 	.word	0x20000198

08003b58 <_malloc_r>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	1ccd      	adds	r5, r1, #3
 8003b5c:	f025 0503 	bic.w	r5, r5, #3
 8003b60:	3508      	adds	r5, #8
 8003b62:	2d0c      	cmp	r5, #12
 8003b64:	bf38      	it	cc
 8003b66:	250c      	movcc	r5, #12
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	db01      	blt.n	8003b72 <_malloc_r+0x1a>
 8003b6e:	42a9      	cmp	r1, r5
 8003b70:	d903      	bls.n	8003b7a <_malloc_r+0x22>
 8003b72:	230c      	movs	r3, #12
 8003b74:	6033      	str	r3, [r6, #0]
 8003b76:	2000      	movs	r0, #0
 8003b78:	bd70      	pop	{r4, r5, r6, pc}
 8003b7a:	f000 f87d 	bl	8003c78 <__malloc_lock>
 8003b7e:	4a21      	ldr	r2, [pc, #132]	; (8003c04 <_malloc_r+0xac>)
 8003b80:	6814      	ldr	r4, [r2, #0]
 8003b82:	4621      	mov	r1, r4
 8003b84:	b991      	cbnz	r1, 8003bac <_malloc_r+0x54>
 8003b86:	4c20      	ldr	r4, [pc, #128]	; (8003c08 <_malloc_r+0xb0>)
 8003b88:	6823      	ldr	r3, [r4, #0]
 8003b8a:	b91b      	cbnz	r3, 8003b94 <_malloc_r+0x3c>
 8003b8c:	4630      	mov	r0, r6
 8003b8e:	f000 f863 	bl	8003c58 <_sbrk_r>
 8003b92:	6020      	str	r0, [r4, #0]
 8003b94:	4629      	mov	r1, r5
 8003b96:	4630      	mov	r0, r6
 8003b98:	f000 f85e 	bl	8003c58 <_sbrk_r>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d124      	bne.n	8003bea <_malloc_r+0x92>
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	6033      	str	r3, [r6, #0]
 8003ba4:	4630      	mov	r0, r6
 8003ba6:	f000 f868 	bl	8003c7a <__malloc_unlock>
 8003baa:	e7e4      	b.n	8003b76 <_malloc_r+0x1e>
 8003bac:	680b      	ldr	r3, [r1, #0]
 8003bae:	1b5b      	subs	r3, r3, r5
 8003bb0:	d418      	bmi.n	8003be4 <_malloc_r+0x8c>
 8003bb2:	2b0b      	cmp	r3, #11
 8003bb4:	d90f      	bls.n	8003bd6 <_malloc_r+0x7e>
 8003bb6:	600b      	str	r3, [r1, #0]
 8003bb8:	50cd      	str	r5, [r1, r3]
 8003bba:	18cc      	adds	r4, r1, r3
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f000 f85c 	bl	8003c7a <__malloc_unlock>
 8003bc2:	f104 000b 	add.w	r0, r4, #11
 8003bc6:	1d23      	adds	r3, r4, #4
 8003bc8:	f020 0007 	bic.w	r0, r0, #7
 8003bcc:	1ac3      	subs	r3, r0, r3
 8003bce:	d0d3      	beq.n	8003b78 <_malloc_r+0x20>
 8003bd0:	425a      	negs	r2, r3
 8003bd2:	50e2      	str	r2, [r4, r3]
 8003bd4:	e7d0      	b.n	8003b78 <_malloc_r+0x20>
 8003bd6:	428c      	cmp	r4, r1
 8003bd8:	684b      	ldr	r3, [r1, #4]
 8003bda:	bf16      	itet	ne
 8003bdc:	6063      	strne	r3, [r4, #4]
 8003bde:	6013      	streq	r3, [r2, #0]
 8003be0:	460c      	movne	r4, r1
 8003be2:	e7eb      	b.n	8003bbc <_malloc_r+0x64>
 8003be4:	460c      	mov	r4, r1
 8003be6:	6849      	ldr	r1, [r1, #4]
 8003be8:	e7cc      	b.n	8003b84 <_malloc_r+0x2c>
 8003bea:	1cc4      	adds	r4, r0, #3
 8003bec:	f024 0403 	bic.w	r4, r4, #3
 8003bf0:	42a0      	cmp	r0, r4
 8003bf2:	d005      	beq.n	8003c00 <_malloc_r+0xa8>
 8003bf4:	1a21      	subs	r1, r4, r0
 8003bf6:	4630      	mov	r0, r6
 8003bf8:	f000 f82e 	bl	8003c58 <_sbrk_r>
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d0cf      	beq.n	8003ba0 <_malloc_r+0x48>
 8003c00:	6025      	str	r5, [r4, #0]
 8003c02:	e7db      	b.n	8003bbc <_malloc_r+0x64>
 8003c04:	20000198 	.word	0x20000198
 8003c08:	2000019c 	.word	0x2000019c

08003c0c <_realloc_r>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	4607      	mov	r7, r0
 8003c10:	4614      	mov	r4, r2
 8003c12:	460e      	mov	r6, r1
 8003c14:	b921      	cbnz	r1, 8003c20 <_realloc_r+0x14>
 8003c16:	4611      	mov	r1, r2
 8003c18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c1c:	f7ff bf9c 	b.w	8003b58 <_malloc_r>
 8003c20:	b922      	cbnz	r2, 8003c2c <_realloc_r+0x20>
 8003c22:	f7ff ff4b 	bl	8003abc <_free_r>
 8003c26:	4625      	mov	r5, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c2c:	f000 f826 	bl	8003c7c <_malloc_usable_size_r>
 8003c30:	42a0      	cmp	r0, r4
 8003c32:	d20f      	bcs.n	8003c54 <_realloc_r+0x48>
 8003c34:	4621      	mov	r1, r4
 8003c36:	4638      	mov	r0, r7
 8003c38:	f7ff ff8e 	bl	8003b58 <_malloc_r>
 8003c3c:	4605      	mov	r5, r0
 8003c3e:	2800      	cmp	r0, #0
 8003c40:	d0f2      	beq.n	8003c28 <_realloc_r+0x1c>
 8003c42:	4631      	mov	r1, r6
 8003c44:	4622      	mov	r2, r4
 8003c46:	f7ff fbdd 	bl	8003404 <memcpy>
 8003c4a:	4631      	mov	r1, r6
 8003c4c:	4638      	mov	r0, r7
 8003c4e:	f7ff ff35 	bl	8003abc <_free_r>
 8003c52:	e7e9      	b.n	8003c28 <_realloc_r+0x1c>
 8003c54:	4635      	mov	r5, r6
 8003c56:	e7e7      	b.n	8003c28 <_realloc_r+0x1c>

08003c58 <_sbrk_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4c06      	ldr	r4, [pc, #24]	; (8003c74 <_sbrk_r+0x1c>)
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4608      	mov	r0, r1
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	f7fd fd64 	bl	8001730 <_sbrk>
 8003c68:	1c43      	adds	r3, r0, #1
 8003c6a:	d102      	bne.n	8003c72 <_sbrk_r+0x1a>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	b103      	cbz	r3, 8003c72 <_sbrk_r+0x1a>
 8003c70:	602b      	str	r3, [r5, #0]
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
 8003c74:	200002bc 	.word	0x200002bc

08003c78 <__malloc_lock>:
 8003c78:	4770      	bx	lr

08003c7a <__malloc_unlock>:
 8003c7a:	4770      	bx	lr

08003c7c <_malloc_usable_size_r>:
 8003c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c80:	1f18      	subs	r0, r3, #4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bfbc      	itt	lt
 8003c86:	580b      	ldrlt	r3, [r1, r0]
 8003c88:	18c0      	addlt	r0, r0, r3
 8003c8a:	4770      	bx	lr

08003c8c <_init>:
 8003c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8e:	bf00      	nop
 8003c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c92:	bc08      	pop	{r3}
 8003c94:	469e      	mov	lr, r3
 8003c96:	4770      	bx	lr

08003c98 <_fini>:
 8003c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c9a:	bf00      	nop
 8003c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9e:	bc08      	pop	{r3}
 8003ca0:	469e      	mov	lr, r3
 8003ca2:	4770      	bx	lr
